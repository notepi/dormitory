/* soapC.cpp
   Generated by gSOAP 2.8.8 from dpflow.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.8 2016-04-25 07:53:41 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__GuardAggregateConf:
		return soap_in_ns1__GuardAggregateConf(soap, NULL, NULL, "ns1:GuardAggregateConf");
	case SOAP_TYPE_ns1__Result:
		return soap_in_ns1__Result(soap, NULL, NULL, "ns1:Result");
	case SOAP_TYPE_ns1__GuardRouteInfo:
		return soap_in_ns1__GuardRouteInfo(soap, NULL, NULL, "ns1:GuardRouteInfo");
	case SOAP_TYPE_ns1__noop:
		return soap_in_ns1__noop(soap, NULL, NULL, "ns1:noop");
	case SOAP_TYPE_PointerTo_ns1__getGuardAggregateConf:
		return soap_in_PointerTo_ns1__getGuardAggregateConf(soap, NULL, NULL, "ns1:getGuardAggregateConf");
	case SOAP_TYPE_PointerTo_ns1__setGuardAggEnableResponse:
		return soap_in_PointerTo_ns1__setGuardAggEnableResponse(soap, NULL, NULL, "ns1:setGuardAggEnableResponse");
	case SOAP_TYPE_PointerTo_ns1__setGuardAggEnable:
		return soap_in_PointerTo_ns1__setGuardAggEnable(soap, NULL, NULL, "ns1:setGuardAggEnable");
	case SOAP_TYPE_PointerTo_ns1__getGuardAggregateRouteInfo:
		return soap_in_PointerTo_ns1__getGuardAggregateRouteInfo(soap, NULL, NULL, "ns1:getGuardAggregateRouteInfo");
	case SOAP_TYPE_PointerTo_ns1__setGuardConfigFinishResponse:
		return soap_in_PointerTo_ns1__setGuardConfigFinishResponse(soap, NULL, NULL, "ns1:setGuardConfigFinishResponse");
	case SOAP_TYPE_PointerTo_ns1__setGuardConfigFinish:
		return soap_in_PointerTo_ns1__setGuardConfigFinish(soap, NULL, NULL, "ns1:setGuardConfigFinish");
	case SOAP_TYPE_PointerTo_ns1__getGuardRouteInfoResponse:
		return soap_in_PointerTo_ns1__getGuardRouteInfoResponse(soap, NULL, NULL, "ns1:getGuardRouteInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__getGuardRouteInfo:
		return soap_in_PointerTo_ns1__getGuardRouteInfo(soap, NULL, NULL, "ns1:getGuardRouteInfo");
	case SOAP_TYPE_PointerTo_ns1__modGuardRouteResponse:
		return soap_in_PointerTo_ns1__modGuardRouteResponse(soap, NULL, NULL, "ns1:modGuardRouteResponse");
	case SOAP_TYPE_PointerTo_ns1__modGuardRoute:
		return soap_in_PointerTo_ns1__modGuardRoute(soap, NULL, NULL, "ns1:modGuardRoute");
	case SOAP_TYPE_PointerTo_ns1__removeGuardRouteRangeResponse:
		return soap_in_PointerTo_ns1__removeGuardRouteRangeResponse(soap, NULL, NULL, "ns1:removeGuardRouteRangeResponse");
	case SOAP_TYPE_PointerTo_ns1__removeGuardRouteRange:
		return soap_in_PointerTo_ns1__removeGuardRouteRange(soap, NULL, NULL, "ns1:removeGuardRouteRange");
	case SOAP_TYPE_PointerTo_ns1__addGuardRouteRangeResponse:
		return soap_in_PointerTo_ns1__addGuardRouteRangeResponse(soap, NULL, NULL, "ns1:addGuardRouteRangeResponse");
	case SOAP_TYPE_PointerTo_ns1__addGuardRouteRange:
		return soap_in_PointerTo_ns1__addGuardRouteRange(soap, NULL, NULL, "ns1:addGuardRouteRange");
	case SOAP_TYPE_PointerTo_ns1__removeGuardRouteResponse:
		return soap_in_PointerTo_ns1__removeGuardRouteResponse(soap, NULL, NULL, "ns1:removeGuardRouteResponse");
	case SOAP_TYPE_PointerTo_ns1__removeGuardRoute:
		return soap_in_PointerTo_ns1__removeGuardRoute(soap, NULL, NULL, "ns1:removeGuardRoute");
	case SOAP_TYPE_PointerTo_ns1__addGuardRouteResponse:
		return soap_in_PointerTo_ns1__addGuardRouteResponse(soap, NULL, NULL, "ns1:addGuardRouteResponse");
	case SOAP_TYPE_PointerTo_ns1__addGuardRoute:
		return soap_in_PointerTo_ns1__addGuardRoute(soap, NULL, NULL, "ns1:addGuardRoute");
	case SOAP_TYPE_PointerTo_ns1__DelRedirectInfoForUMCResponse:
		return soap_in_PointerTo_ns1__DelRedirectInfoForUMCResponse(soap, NULL, NULL, "ns1:DelRedirectInfoForUMCResponse");
	case SOAP_TYPE_PointerTo_ns1__DelRedirectInfoForUMC:
		return soap_in_PointerTo_ns1__DelRedirectInfoForUMC(soap, NULL, NULL, "ns1:DelRedirectInfoForUMC");
	case SOAP_TYPE_PointerTo_ns1__setRedirectInfoForUMCResponse:
		return soap_in_PointerTo_ns1__setRedirectInfoForUMCResponse(soap, NULL, NULL, "ns1:setRedirectInfoForUMCResponse");
	case SOAP_TYPE_PointerTo_ns1__setRedirectInfoForUMC:
		return soap_in_PointerTo_ns1__setRedirectInfoForUMC(soap, NULL, NULL, "ns1:setRedirectInfoForUMC");
	case SOAP_TYPE_PointerTons1__GuardAggregateConf:
		return soap_in_PointerTons1__GuardAggregateConf(soap, NULL, NULL, "ns1:GuardAggregateConf");
	case SOAP_TYPE_PointerTons1__Result:
		return soap_in_PointerTons1__Result(soap, NULL, NULL, "ns1:Result");
	case SOAP_TYPE_PointerTons1__GuardRouteInfo:
		return soap_in_PointerTons1__GuardRouteInfo(soap, NULL, NULL, "ns1:GuardRouteInfo");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GuardAggregateConf"))
		{	*type = SOAP_TYPE_ns1__GuardAggregateConf;
			return soap_in_ns1__GuardAggregateConf(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Result"))
		{	*type = SOAP_TYPE_ns1__Result;
			return soap_in_ns1__Result(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GuardRouteInfo"))
		{	*type = SOAP_TYPE_ns1__GuardRouteInfo;
			return soap_in_ns1__GuardRouteInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:noop"))
		{	*type = SOAP_TYPE_ns1__noop;
			return soap_in_ns1__noop(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:GuardAggregateConfResponse"))
		{	*type = SOAP_TYPE__ns1__GuardAggregateConfResponse;
			return soap_in__ns1__GuardAggregateConfResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getGuardAggregateConf"))
		{	*type = SOAP_TYPE__ns1__getGuardAggregateConf;
			return soap_in__ns1__getGuardAggregateConf(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setGuardAggEnableResponse"))
		{	*type = SOAP_TYPE__ns1__setGuardAggEnableResponse;
			return soap_in__ns1__setGuardAggEnableResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setGuardAggEnable"))
		{	*type = SOAP_TYPE__ns1__setGuardAggEnable;
			return soap_in__ns1__setGuardAggEnable(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getGuardAggregateRouteInfo"))
		{	*type = SOAP_TYPE__ns1__getGuardAggregateRouteInfo;
			return soap_in__ns1__getGuardAggregateRouteInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setGuardConfigFinishResponse"))
		{	*type = SOAP_TYPE__ns1__setGuardConfigFinishResponse;
			return soap_in__ns1__setGuardConfigFinishResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setGuardConfigFinish"))
		{	*type = SOAP_TYPE__ns1__setGuardConfigFinish;
			return soap_in__ns1__setGuardConfigFinish(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getGuardRouteInfoResponse"))
		{	*type = SOAP_TYPE__ns1__getGuardRouteInfoResponse;
			return soap_in__ns1__getGuardRouteInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:getGuardRouteInfo"))
		{	*type = SOAP_TYPE__ns1__getGuardRouteInfo;
			return soap_in__ns1__getGuardRouteInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:modGuardRouteResponse"))
		{	*type = SOAP_TYPE__ns1__modGuardRouteResponse;
			return soap_in__ns1__modGuardRouteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:modGuardRoute"))
		{	*type = SOAP_TYPE__ns1__modGuardRoute;
			return soap_in__ns1__modGuardRoute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:removeGuardRouteRangeResponse"))
		{	*type = SOAP_TYPE__ns1__removeGuardRouteRangeResponse;
			return soap_in__ns1__removeGuardRouteRangeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:removeGuardRouteRange"))
		{	*type = SOAP_TYPE__ns1__removeGuardRouteRange;
			return soap_in__ns1__removeGuardRouteRange(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:addGuardRouteRangeResponse"))
		{	*type = SOAP_TYPE__ns1__addGuardRouteRangeResponse;
			return soap_in__ns1__addGuardRouteRangeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:addGuardRouteRange"))
		{	*type = SOAP_TYPE__ns1__addGuardRouteRange;
			return soap_in__ns1__addGuardRouteRange(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:removeGuardRouteResponse"))
		{	*type = SOAP_TYPE__ns1__removeGuardRouteResponse;
			return soap_in__ns1__removeGuardRouteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:removeGuardRoute"))
		{	*type = SOAP_TYPE__ns1__removeGuardRoute;
			return soap_in__ns1__removeGuardRoute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:addGuardRouteResponse"))
		{	*type = SOAP_TYPE__ns1__addGuardRouteResponse;
			return soap_in__ns1__addGuardRouteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:addGuardRoute"))
		{	*type = SOAP_TYPE__ns1__addGuardRoute;
			return soap_in__ns1__addGuardRoute(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DelRedirectInfoForUMCResponse"))
		{	*type = SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse;
			return soap_in__ns1__DelRedirectInfoForUMCResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DelRedirectInfoForUMC"))
		{	*type = SOAP_TYPE__ns1__DelRedirectInfoForUMC;
			return soap_in__ns1__DelRedirectInfoForUMC(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setRedirectInfoForUMCResponse"))
		{	*type = SOAP_TYPE__ns1__setRedirectInfoForUMCResponse;
			return soap_in__ns1__setRedirectInfoForUMCResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:setRedirectInfoForUMC"))
		{	*type = SOAP_TYPE__ns1__setRedirectInfoForUMC;
			return soap_in__ns1__setRedirectInfoForUMC(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsdl:GuardAggregateConfResponse"))
		{	char **s;
			*type = SOAP_TYPE__wsdl__GuardAggregateConfResponse;
			s = soap_in__wsdl__GuardAggregateConfResponse(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__GuardAggregateConfResponse:
		return ((_ns1__GuardAggregateConfResponse *)ptr)->soap_out(soap, "ns1:GuardAggregateConfResponse", id, NULL);
	case SOAP_TYPE__ns1__getGuardAggregateConf:
		return ((_ns1__getGuardAggregateConf *)ptr)->soap_out(soap, "ns1:getGuardAggregateConf", id, NULL);
	case SOAP_TYPE__ns1__setGuardAggEnableResponse:
		return ((_ns1__setGuardAggEnableResponse *)ptr)->soap_out(soap, "ns1:setGuardAggEnableResponse", id, NULL);
	case SOAP_TYPE__ns1__setGuardAggEnable:
		return ((_ns1__setGuardAggEnable *)ptr)->soap_out(soap, "ns1:setGuardAggEnable", id, NULL);
	case SOAP_TYPE__ns1__getGuardAggregateRouteInfo:
		return ((_ns1__getGuardAggregateRouteInfo *)ptr)->soap_out(soap, "ns1:getGuardAggregateRouteInfo", id, NULL);
	case SOAP_TYPE__ns1__setGuardConfigFinishResponse:
		return ((_ns1__setGuardConfigFinishResponse *)ptr)->soap_out(soap, "ns1:setGuardConfigFinishResponse", id, NULL);
	case SOAP_TYPE__ns1__setGuardConfigFinish:
		return ((_ns1__setGuardConfigFinish *)ptr)->soap_out(soap, "ns1:setGuardConfigFinish", id, NULL);
	case SOAP_TYPE__ns1__getGuardRouteInfoResponse:
		return ((_ns1__getGuardRouteInfoResponse *)ptr)->soap_out(soap, "ns1:getGuardRouteInfoResponse", id, NULL);
	case SOAP_TYPE__ns1__getGuardRouteInfo:
		return ((_ns1__getGuardRouteInfo *)ptr)->soap_out(soap, "ns1:getGuardRouteInfo", id, NULL);
	case SOAP_TYPE__ns1__modGuardRouteResponse:
		return ((_ns1__modGuardRouteResponse *)ptr)->soap_out(soap, "ns1:modGuardRouteResponse", id, NULL);
	case SOAP_TYPE__ns1__modGuardRoute:
		return ((_ns1__modGuardRoute *)ptr)->soap_out(soap, "ns1:modGuardRoute", id, NULL);
	case SOAP_TYPE__ns1__removeGuardRouteRangeResponse:
		return ((_ns1__removeGuardRouteRangeResponse *)ptr)->soap_out(soap, "ns1:removeGuardRouteRangeResponse", id, NULL);
	case SOAP_TYPE__ns1__removeGuardRouteRange:
		return ((_ns1__removeGuardRouteRange *)ptr)->soap_out(soap, "ns1:removeGuardRouteRange", id, NULL);
	case SOAP_TYPE__ns1__addGuardRouteRangeResponse:
		return ((_ns1__addGuardRouteRangeResponse *)ptr)->soap_out(soap, "ns1:addGuardRouteRangeResponse", id, NULL);
	case SOAP_TYPE__ns1__addGuardRouteRange:
		return ((_ns1__addGuardRouteRange *)ptr)->soap_out(soap, "ns1:addGuardRouteRange", id, NULL);
	case SOAP_TYPE__ns1__removeGuardRouteResponse:
		return ((_ns1__removeGuardRouteResponse *)ptr)->soap_out(soap, "ns1:removeGuardRouteResponse", id, NULL);
	case SOAP_TYPE__ns1__removeGuardRoute:
		return ((_ns1__removeGuardRoute *)ptr)->soap_out(soap, "ns1:removeGuardRoute", id, NULL);
	case SOAP_TYPE__ns1__addGuardRouteResponse:
		return ((_ns1__addGuardRouteResponse *)ptr)->soap_out(soap, "ns1:addGuardRouteResponse", id, NULL);
	case SOAP_TYPE__ns1__addGuardRoute:
		return ((_ns1__addGuardRoute *)ptr)->soap_out(soap, "ns1:addGuardRoute", id, NULL);
	case SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse:
		return ((_ns1__DelRedirectInfoForUMCResponse *)ptr)->soap_out(soap, "ns1:DelRedirectInfoForUMCResponse", id, NULL);
	case SOAP_TYPE__ns1__DelRedirectInfoForUMC:
		return ((_ns1__DelRedirectInfoForUMC *)ptr)->soap_out(soap, "ns1:DelRedirectInfoForUMC", id, NULL);
	case SOAP_TYPE__ns1__setRedirectInfoForUMCResponse:
		return ((_ns1__setRedirectInfoForUMCResponse *)ptr)->soap_out(soap, "ns1:setRedirectInfoForUMCResponse", id, NULL);
	case SOAP_TYPE__ns1__setRedirectInfoForUMC:
		return ((_ns1__setRedirectInfoForUMC *)ptr)->soap_out(soap, "ns1:setRedirectInfoForUMC", id, NULL);
	case SOAP_TYPE_ns1__GuardAggregateConf:
		return ((ns1__GuardAggregateConf *)ptr)->soap_out(soap, tag, id, "ns1:GuardAggregateConf");
	case SOAP_TYPE_ns1__Result:
		return ((ns1__Result *)ptr)->soap_out(soap, tag, id, "ns1:Result");
	case SOAP_TYPE_ns1__GuardRouteInfo:
		return ((ns1__GuardRouteInfo *)ptr)->soap_out(soap, tag, id, "ns1:GuardRouteInfo");
	case SOAP_TYPE_ns1__noop:
		return ((ns1__noop *)ptr)->soap_out(soap, tag, id, "ns1:noop");
	case SOAP_TYPE_PointerTo_ns1__getGuardAggregateConf:
		return soap_out_PointerTo_ns1__getGuardAggregateConf(soap, tag, id, (_ns1__getGuardAggregateConf *const*)ptr, "ns1:getGuardAggregateConf");
	case SOAP_TYPE_PointerTo_ns1__setGuardAggEnableResponse:
		return soap_out_PointerTo_ns1__setGuardAggEnableResponse(soap, tag, id, (_ns1__setGuardAggEnableResponse *const*)ptr, "ns1:setGuardAggEnableResponse");
	case SOAP_TYPE_PointerTo_ns1__setGuardAggEnable:
		return soap_out_PointerTo_ns1__setGuardAggEnable(soap, tag, id, (_ns1__setGuardAggEnable *const*)ptr, "ns1:setGuardAggEnable");
	case SOAP_TYPE_PointerTo_ns1__getGuardAggregateRouteInfo:
		return soap_out_PointerTo_ns1__getGuardAggregateRouteInfo(soap, tag, id, (_ns1__getGuardAggregateRouteInfo *const*)ptr, "ns1:getGuardAggregateRouteInfo");
	case SOAP_TYPE_PointerTo_ns1__setGuardConfigFinishResponse:
		return soap_out_PointerTo_ns1__setGuardConfigFinishResponse(soap, tag, id, (_ns1__setGuardConfigFinishResponse *const*)ptr, "ns1:setGuardConfigFinishResponse");
	case SOAP_TYPE_PointerTo_ns1__setGuardConfigFinish:
		return soap_out_PointerTo_ns1__setGuardConfigFinish(soap, tag, id, (_ns1__setGuardConfigFinish *const*)ptr, "ns1:setGuardConfigFinish");
	case SOAP_TYPE_PointerTo_ns1__getGuardRouteInfoResponse:
		return soap_out_PointerTo_ns1__getGuardRouteInfoResponse(soap, tag, id, (_ns1__getGuardRouteInfoResponse *const*)ptr, "ns1:getGuardRouteInfoResponse");
	case SOAP_TYPE_PointerTo_ns1__getGuardRouteInfo:
		return soap_out_PointerTo_ns1__getGuardRouteInfo(soap, tag, id, (_ns1__getGuardRouteInfo *const*)ptr, "ns1:getGuardRouteInfo");
	case SOAP_TYPE_PointerTo_ns1__modGuardRouteResponse:
		return soap_out_PointerTo_ns1__modGuardRouteResponse(soap, tag, id, (_ns1__modGuardRouteResponse *const*)ptr, "ns1:modGuardRouteResponse");
	case SOAP_TYPE_PointerTo_ns1__modGuardRoute:
		return soap_out_PointerTo_ns1__modGuardRoute(soap, tag, id, (_ns1__modGuardRoute *const*)ptr, "ns1:modGuardRoute");
	case SOAP_TYPE_PointerTo_ns1__removeGuardRouteRangeResponse:
		return soap_out_PointerTo_ns1__removeGuardRouteRangeResponse(soap, tag, id, (_ns1__removeGuardRouteRangeResponse *const*)ptr, "ns1:removeGuardRouteRangeResponse");
	case SOAP_TYPE_PointerTo_ns1__removeGuardRouteRange:
		return soap_out_PointerTo_ns1__removeGuardRouteRange(soap, tag, id, (_ns1__removeGuardRouteRange *const*)ptr, "ns1:removeGuardRouteRange");
	case SOAP_TYPE_PointerTo_ns1__addGuardRouteRangeResponse:
		return soap_out_PointerTo_ns1__addGuardRouteRangeResponse(soap, tag, id, (_ns1__addGuardRouteRangeResponse *const*)ptr, "ns1:addGuardRouteRangeResponse");
	case SOAP_TYPE_PointerTo_ns1__addGuardRouteRange:
		return soap_out_PointerTo_ns1__addGuardRouteRange(soap, tag, id, (_ns1__addGuardRouteRange *const*)ptr, "ns1:addGuardRouteRange");
	case SOAP_TYPE_PointerTo_ns1__removeGuardRouteResponse:
		return soap_out_PointerTo_ns1__removeGuardRouteResponse(soap, tag, id, (_ns1__removeGuardRouteResponse *const*)ptr, "ns1:removeGuardRouteResponse");
	case SOAP_TYPE_PointerTo_ns1__removeGuardRoute:
		return soap_out_PointerTo_ns1__removeGuardRoute(soap, tag, id, (_ns1__removeGuardRoute *const*)ptr, "ns1:removeGuardRoute");
	case SOAP_TYPE_PointerTo_ns1__addGuardRouteResponse:
		return soap_out_PointerTo_ns1__addGuardRouteResponse(soap, tag, id, (_ns1__addGuardRouteResponse *const*)ptr, "ns1:addGuardRouteResponse");
	case SOAP_TYPE_PointerTo_ns1__addGuardRoute:
		return soap_out_PointerTo_ns1__addGuardRoute(soap, tag, id, (_ns1__addGuardRoute *const*)ptr, "ns1:addGuardRoute");
	case SOAP_TYPE_PointerTo_ns1__DelRedirectInfoForUMCResponse:
		return soap_out_PointerTo_ns1__DelRedirectInfoForUMCResponse(soap, tag, id, (_ns1__DelRedirectInfoForUMCResponse *const*)ptr, "ns1:DelRedirectInfoForUMCResponse");
	case SOAP_TYPE_PointerTo_ns1__DelRedirectInfoForUMC:
		return soap_out_PointerTo_ns1__DelRedirectInfoForUMC(soap, tag, id, (_ns1__DelRedirectInfoForUMC *const*)ptr, "ns1:DelRedirectInfoForUMC");
	case SOAP_TYPE_PointerTo_ns1__setRedirectInfoForUMCResponse:
		return soap_out_PointerTo_ns1__setRedirectInfoForUMCResponse(soap, tag, id, (_ns1__setRedirectInfoForUMCResponse *const*)ptr, "ns1:setRedirectInfoForUMCResponse");
	case SOAP_TYPE_PointerTo_ns1__setRedirectInfoForUMC:
		return soap_out_PointerTo_ns1__setRedirectInfoForUMC(soap, tag, id, (_ns1__setRedirectInfoForUMC *const*)ptr, "ns1:setRedirectInfoForUMC");
	case SOAP_TYPE_PointerTons1__GuardAggregateConf:
		return soap_out_PointerTons1__GuardAggregateConf(soap, tag, id, (ns1__GuardAggregateConf *const*)ptr, "ns1:GuardAggregateConf");
	case SOAP_TYPE_PointerTons1__Result:
		return soap_out_PointerTons1__Result(soap, tag, id, (ns1__Result *const*)ptr, "ns1:Result");
	case SOAP_TYPE_PointerTons1__GuardRouteInfo:
		return soap_out_PointerTons1__GuardRouteInfo(soap, tag, id, (ns1__GuardRouteInfo *const*)ptr, "ns1:GuardRouteInfo");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE__wsdl__GuardAggregateConfResponse:
		return soap_out_string(soap, "wsdl:GuardAggregateConfResponse", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__GuardAggregateConfResponse:
		((_ns1__GuardAggregateConfResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getGuardAggregateConf:
		((_ns1__getGuardAggregateConf *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setGuardAggEnableResponse:
		((_ns1__setGuardAggEnableResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setGuardAggEnable:
		((_ns1__setGuardAggEnable *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getGuardAggregateRouteInfo:
		((_ns1__getGuardAggregateRouteInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setGuardConfigFinishResponse:
		((_ns1__setGuardConfigFinishResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setGuardConfigFinish:
		((_ns1__setGuardConfigFinish *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getGuardRouteInfoResponse:
		((_ns1__getGuardRouteInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__getGuardRouteInfo:
		((_ns1__getGuardRouteInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__modGuardRouteResponse:
		((_ns1__modGuardRouteResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__modGuardRoute:
		((_ns1__modGuardRoute *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__removeGuardRouteRangeResponse:
		((_ns1__removeGuardRouteRangeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__removeGuardRouteRange:
		((_ns1__removeGuardRouteRange *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__addGuardRouteRangeResponse:
		((_ns1__addGuardRouteRangeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__addGuardRouteRange:
		((_ns1__addGuardRouteRange *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__removeGuardRouteResponse:
		((_ns1__removeGuardRouteResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__removeGuardRoute:
		((_ns1__removeGuardRoute *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__addGuardRouteResponse:
		((_ns1__addGuardRouteResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__addGuardRoute:
		((_ns1__addGuardRoute *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse:
		((_ns1__DelRedirectInfoForUMCResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DelRedirectInfoForUMC:
		((_ns1__DelRedirectInfoForUMC *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setRedirectInfoForUMCResponse:
		((_ns1__setRedirectInfoForUMCResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__setRedirectInfoForUMC:
		((_ns1__setRedirectInfoForUMC *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__GuardAggregateConf:
		((ns1__GuardAggregateConf *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Result:
		((ns1__Result *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__GuardRouteInfo:
		((ns1__GuardRouteInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__noop:
		((ns1__noop *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__getGuardAggregateConf:
		soap_serialize___ns1__getGuardAggregateConf(soap, (const struct __ns1__getGuardAggregateConf *)ptr);
		break;
	case SOAP_TYPE___ns1__getGuardAggregateConfResponse:
		soap_serialize___ns1__getGuardAggregateConfResponse(soap, (const struct __ns1__getGuardAggregateConfResponse *)ptr);
		break;
	case SOAP_TYPE___ns1__setGuardAggEnable:
		soap_serialize___ns1__setGuardAggEnable(soap, (const struct __ns1__setGuardAggEnable *)ptr);
		break;
	case SOAP_TYPE___ns1__getGuardAggregateRouteInfo:
		soap_serialize___ns1__getGuardAggregateRouteInfo(soap, (const struct __ns1__getGuardAggregateRouteInfo *)ptr);
		break;
	case SOAP_TYPE___ns1__setGuardConfigFinish:
		soap_serialize___ns1__setGuardConfigFinish(soap, (const struct __ns1__setGuardConfigFinish *)ptr);
		break;
	case SOAP_TYPE___ns1__getGuardRouteInfo:
		soap_serialize___ns1__getGuardRouteInfo(soap, (const struct __ns1__getGuardRouteInfo *)ptr);
		break;
	case SOAP_TYPE___ns1__modGuardRoute:
		soap_serialize___ns1__modGuardRoute(soap, (const struct __ns1__modGuardRoute *)ptr);
		break;
	case SOAP_TYPE___ns1__removeGuardRouteRange:
		soap_serialize___ns1__removeGuardRouteRange(soap, (const struct __ns1__removeGuardRouteRange *)ptr);
		break;
	case SOAP_TYPE___ns1__addGuardRouteRange:
		soap_serialize___ns1__addGuardRouteRange(soap, (const struct __ns1__addGuardRouteRange *)ptr);
		break;
	case SOAP_TYPE___ns1__removeGuardRoute:
		soap_serialize___ns1__removeGuardRoute(soap, (const struct __ns1__removeGuardRoute *)ptr);
		break;
	case SOAP_TYPE___ns1__addGuardRoute:
		soap_serialize___ns1__addGuardRoute(soap, (const struct __ns1__addGuardRoute *)ptr);
		break;
	case SOAP_TYPE___ns1__DelRedirectInfoForUMC:
		soap_serialize___ns1__DelRedirectInfoForUMC(soap, (const struct __ns1__DelRedirectInfoForUMC *)ptr);
		break;
	case SOAP_TYPE___ns1__setRedirectInfoForUMC:
		soap_serialize___ns1__setRedirectInfoForUMC(soap, (const struct __ns1__setRedirectInfoForUMC *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getGuardAggregateConf:
		soap_serialize_PointerTo_ns1__getGuardAggregateConf(soap, (_ns1__getGuardAggregateConf *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__setGuardAggEnableResponse:
		soap_serialize_PointerTo_ns1__setGuardAggEnableResponse(soap, (_ns1__setGuardAggEnableResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__setGuardAggEnable:
		soap_serialize_PointerTo_ns1__setGuardAggEnable(soap, (_ns1__setGuardAggEnable *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getGuardAggregateRouteInfo:
		soap_serialize_PointerTo_ns1__getGuardAggregateRouteInfo(soap, (_ns1__getGuardAggregateRouteInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__setGuardConfigFinishResponse:
		soap_serialize_PointerTo_ns1__setGuardConfigFinishResponse(soap, (_ns1__setGuardConfigFinishResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__setGuardConfigFinish:
		soap_serialize_PointerTo_ns1__setGuardConfigFinish(soap, (_ns1__setGuardConfigFinish *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getGuardRouteInfoResponse:
		soap_serialize_PointerTo_ns1__getGuardRouteInfoResponse(soap, (_ns1__getGuardRouteInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__getGuardRouteInfo:
		soap_serialize_PointerTo_ns1__getGuardRouteInfo(soap, (_ns1__getGuardRouteInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__modGuardRouteResponse:
		soap_serialize_PointerTo_ns1__modGuardRouteResponse(soap, (_ns1__modGuardRouteResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__modGuardRoute:
		soap_serialize_PointerTo_ns1__modGuardRoute(soap, (_ns1__modGuardRoute *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__removeGuardRouteRangeResponse:
		soap_serialize_PointerTo_ns1__removeGuardRouteRangeResponse(soap, (_ns1__removeGuardRouteRangeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__removeGuardRouteRange:
		soap_serialize_PointerTo_ns1__removeGuardRouteRange(soap, (_ns1__removeGuardRouteRange *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__addGuardRouteRangeResponse:
		soap_serialize_PointerTo_ns1__addGuardRouteRangeResponse(soap, (_ns1__addGuardRouteRangeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__addGuardRouteRange:
		soap_serialize_PointerTo_ns1__addGuardRouteRange(soap, (_ns1__addGuardRouteRange *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__removeGuardRouteResponse:
		soap_serialize_PointerTo_ns1__removeGuardRouteResponse(soap, (_ns1__removeGuardRouteResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__removeGuardRoute:
		soap_serialize_PointerTo_ns1__removeGuardRoute(soap, (_ns1__removeGuardRoute *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__addGuardRouteResponse:
		soap_serialize_PointerTo_ns1__addGuardRouteResponse(soap, (_ns1__addGuardRouteResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__addGuardRoute:
		soap_serialize_PointerTo_ns1__addGuardRoute(soap, (_ns1__addGuardRoute *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DelRedirectInfoForUMCResponse:
		soap_serialize_PointerTo_ns1__DelRedirectInfoForUMCResponse(soap, (_ns1__DelRedirectInfoForUMCResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DelRedirectInfoForUMC:
		soap_serialize_PointerTo_ns1__DelRedirectInfoForUMC(soap, (_ns1__DelRedirectInfoForUMC *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__setRedirectInfoForUMCResponse:
		soap_serialize_PointerTo_ns1__setRedirectInfoForUMCResponse(soap, (_ns1__setRedirectInfoForUMCResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__setRedirectInfoForUMC:
		soap_serialize_PointerTo_ns1__setRedirectInfoForUMC(soap, (_ns1__setRedirectInfoForUMC *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__GuardAggregateConf:
		soap_serialize_PointerTons1__GuardAggregateConf(soap, (ns1__GuardAggregateConf *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__Result:
		soap_serialize_PointerTons1__Result(soap, (ns1__Result *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__GuardRouteInfo:
		soap_serialize_PointerTons1__GuardRouteInfo(soap, (ns1__GuardRouteInfo *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE__wsdl__GuardAggregateConfResponse:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns1__noop:
		return (void*)soap_instantiate_ns1__noop(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__GuardRouteInfo:
		return (void*)soap_instantiate_ns1__GuardRouteInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Result:
		return (void*)soap_instantiate_ns1__Result(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__GuardAggregateConf:
		return (void*)soap_instantiate_ns1__GuardAggregateConf(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setRedirectInfoForUMC:
		return (void*)soap_instantiate__ns1__setRedirectInfoForUMC(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setRedirectInfoForUMCResponse:
		return (void*)soap_instantiate__ns1__setRedirectInfoForUMCResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DelRedirectInfoForUMC:
		return (void*)soap_instantiate__ns1__DelRedirectInfoForUMC(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse:
		return (void*)soap_instantiate__ns1__DelRedirectInfoForUMCResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__addGuardRoute:
		return (void*)soap_instantiate__ns1__addGuardRoute(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__addGuardRouteResponse:
		return (void*)soap_instantiate__ns1__addGuardRouteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__removeGuardRoute:
		return (void*)soap_instantiate__ns1__removeGuardRoute(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__removeGuardRouteResponse:
		return (void*)soap_instantiate__ns1__removeGuardRouteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__addGuardRouteRange:
		return (void*)soap_instantiate__ns1__addGuardRouteRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__addGuardRouteRangeResponse:
		return (void*)soap_instantiate__ns1__addGuardRouteRangeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__removeGuardRouteRange:
		return (void*)soap_instantiate__ns1__removeGuardRouteRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__removeGuardRouteRangeResponse:
		return (void*)soap_instantiate__ns1__removeGuardRouteRangeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__modGuardRoute:
		return (void*)soap_instantiate__ns1__modGuardRoute(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__modGuardRouteResponse:
		return (void*)soap_instantiate__ns1__modGuardRouteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getGuardRouteInfo:
		return (void*)soap_instantiate__ns1__getGuardRouteInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getGuardRouteInfoResponse:
		return (void*)soap_instantiate__ns1__getGuardRouteInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setGuardConfigFinish:
		return (void*)soap_instantiate__ns1__setGuardConfigFinish(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setGuardConfigFinishResponse:
		return (void*)soap_instantiate__ns1__setGuardConfigFinishResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getGuardAggregateRouteInfo:
		return (void*)soap_instantiate__ns1__getGuardAggregateRouteInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setGuardAggEnable:
		return (void*)soap_instantiate__ns1__setGuardAggEnable(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__setGuardAggEnableResponse:
		return (void*)soap_instantiate__ns1__setGuardAggEnableResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__getGuardAggregateConf:
		return (void*)soap_instantiate__ns1__getGuardAggregateConf(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GuardAggregateConfResponse:
		return (void*)soap_instantiate__ns1__GuardAggregateConfResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__setRedirectInfoForUMC:
		return (void*)soap_instantiate___ns1__setRedirectInfoForUMC(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DelRedirectInfoForUMC:
		return (void*)soap_instantiate___ns1__DelRedirectInfoForUMC(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__addGuardRoute:
		return (void*)soap_instantiate___ns1__addGuardRoute(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__removeGuardRoute:
		return (void*)soap_instantiate___ns1__removeGuardRoute(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__addGuardRouteRange:
		return (void*)soap_instantiate___ns1__addGuardRouteRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__removeGuardRouteRange:
		return (void*)soap_instantiate___ns1__removeGuardRouteRange(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__modGuardRoute:
		return (void*)soap_instantiate___ns1__modGuardRoute(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getGuardRouteInfo:
		return (void*)soap_instantiate___ns1__getGuardRouteInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__setGuardConfigFinish:
		return (void*)soap_instantiate___ns1__setGuardConfigFinish(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getGuardAggregateRouteInfo:
		return (void*)soap_instantiate___ns1__getGuardAggregateRouteInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__setGuardAggEnable:
		return (void*)soap_instantiate___ns1__setGuardAggEnable(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getGuardAggregateConfResponse:
		return (void*)soap_instantiate___ns1__getGuardAggregateConfResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__getGuardAggregateConf:
		return (void*)soap_instantiate___ns1__getGuardAggregateConf(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__GuardRouteInfo:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTons1__GuardRouteInfo(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns1__noop:
		if (p->size < 0)
			SOAP_DELETE((ns1__noop*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__noop*)p->ptr);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns1__GuardRouteInfo:
		if (p->size < 0)
			SOAP_DELETE((ns1__GuardRouteInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__GuardRouteInfo*)p->ptr);
		break;
	case SOAP_TYPE_ns1__Result:
		if (p->size < 0)
			SOAP_DELETE((ns1__Result*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__Result*)p->ptr);
		break;
	case SOAP_TYPE_ns1__GuardAggregateConf:
		if (p->size < 0)
			SOAP_DELETE((ns1__GuardAggregateConf*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__GuardAggregateConf*)p->ptr);
		break;
	case SOAP_TYPE__ns1__setRedirectInfoForUMC:
		if (p->size < 0)
			SOAP_DELETE((_ns1__setRedirectInfoForUMC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__setRedirectInfoForUMC*)p->ptr);
		break;
	case SOAP_TYPE__ns1__setRedirectInfoForUMCResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__setRedirectInfoForUMCResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__setRedirectInfoForUMCResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DelRedirectInfoForUMC:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DelRedirectInfoForUMC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DelRedirectInfoForUMC*)p->ptr);
		break;
	case SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__DelRedirectInfoForUMCResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__DelRedirectInfoForUMCResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__addGuardRoute:
		if (p->size < 0)
			SOAP_DELETE((_ns1__addGuardRoute*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__addGuardRoute*)p->ptr);
		break;
	case SOAP_TYPE__ns1__addGuardRouteResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__addGuardRouteResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__addGuardRouteResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__removeGuardRoute:
		if (p->size < 0)
			SOAP_DELETE((_ns1__removeGuardRoute*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__removeGuardRoute*)p->ptr);
		break;
	case SOAP_TYPE__ns1__removeGuardRouteResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__removeGuardRouteResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__removeGuardRouteResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__addGuardRouteRange:
		if (p->size < 0)
			SOAP_DELETE((_ns1__addGuardRouteRange*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__addGuardRouteRange*)p->ptr);
		break;
	case SOAP_TYPE__ns1__addGuardRouteRangeResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__addGuardRouteRangeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__addGuardRouteRangeResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__removeGuardRouteRange:
		if (p->size < 0)
			SOAP_DELETE((_ns1__removeGuardRouteRange*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__removeGuardRouteRange*)p->ptr);
		break;
	case SOAP_TYPE__ns1__removeGuardRouteRangeResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__removeGuardRouteRangeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__removeGuardRouteRangeResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__modGuardRoute:
		if (p->size < 0)
			SOAP_DELETE((_ns1__modGuardRoute*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__modGuardRoute*)p->ptr);
		break;
	case SOAP_TYPE__ns1__modGuardRouteResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__modGuardRouteResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__modGuardRouteResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__getGuardRouteInfo:
		if (p->size < 0)
			SOAP_DELETE((_ns1__getGuardRouteInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__getGuardRouteInfo*)p->ptr);
		break;
	case SOAP_TYPE__ns1__getGuardRouteInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__getGuardRouteInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__getGuardRouteInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__setGuardConfigFinish:
		if (p->size < 0)
			SOAP_DELETE((_ns1__setGuardConfigFinish*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__setGuardConfigFinish*)p->ptr);
		break;
	case SOAP_TYPE__ns1__setGuardConfigFinishResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__setGuardConfigFinishResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__setGuardConfigFinishResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__getGuardAggregateRouteInfo:
		if (p->size < 0)
			SOAP_DELETE((_ns1__getGuardAggregateRouteInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__getGuardAggregateRouteInfo*)p->ptr);
		break;
	case SOAP_TYPE__ns1__setGuardAggEnable:
		if (p->size < 0)
			SOAP_DELETE((_ns1__setGuardAggEnable*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__setGuardAggEnable*)p->ptr);
		break;
	case SOAP_TYPE__ns1__setGuardAggEnableResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__setGuardAggEnableResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__setGuardAggEnableResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__getGuardAggregateConf:
		if (p->size < 0)
			SOAP_DELETE((_ns1__getGuardAggregateConf*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__getGuardAggregateConf*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GuardAggregateConfResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GuardAggregateConfResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GuardAggregateConfResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__setRedirectInfoForUMC:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__setRedirectInfoForUMC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__setRedirectInfoForUMC*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DelRedirectInfoForUMC:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DelRedirectInfoForUMC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DelRedirectInfoForUMC*)p->ptr);
		break;
	case SOAP_TYPE___ns1__addGuardRoute:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__addGuardRoute*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__addGuardRoute*)p->ptr);
		break;
	case SOAP_TYPE___ns1__removeGuardRoute:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__removeGuardRoute*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__removeGuardRoute*)p->ptr);
		break;
	case SOAP_TYPE___ns1__addGuardRouteRange:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__addGuardRouteRange*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__addGuardRouteRange*)p->ptr);
		break;
	case SOAP_TYPE___ns1__removeGuardRouteRange:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__removeGuardRouteRange*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__removeGuardRouteRange*)p->ptr);
		break;
	case SOAP_TYPE___ns1__modGuardRoute:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__modGuardRoute*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__modGuardRoute*)p->ptr);
		break;
	case SOAP_TYPE___ns1__getGuardRouteInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__getGuardRouteInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__getGuardRouteInfo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__setGuardConfigFinish:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__setGuardConfigFinish*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__setGuardConfigFinish*)p->ptr);
		break;
	case SOAP_TYPE___ns1__getGuardAggregateRouteInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__getGuardAggregateRouteInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__getGuardAggregateRouteInfo*)p->ptr);
		break;
	case SOAP_TYPE___ns1__setGuardAggEnable:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__setGuardAggEnable*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__setGuardAggEnable*)p->ptr);
		break;
	case SOAP_TYPE___ns1__getGuardAggregateConfResponse:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__getGuardAggregateConfResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__getGuardAggregateConfResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__getGuardAggregateConf:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__getGuardAggregateConf*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__getGuardAggregateConf*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__GuardRouteInfo:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns1__GuardRouteInfo * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns1__GuardRouteInfo * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerTons1__GuardRouteInfo:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns1__GuardRouteInfo * >*)p)[len] = *(ns1__GuardRouteInfo **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__GuardAggregateConfResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GuardAggregateConfResponse::ret = NULL;
	/* transient soap skipped */
}

void _ns1__GuardAggregateConfResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__GuardAggregateConf(soap, &this->_ns1__GuardAggregateConfResponse::ret);
	/* transient soap skipped */
}

int _ns1__GuardAggregateConfResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GuardAggregateConfResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GuardAggregateConfResponse(struct soap *soap, const char *tag, int id, const _ns1__GuardAggregateConfResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GuardAggregateConfResponse), type))
		return soap->error;
	if (a->_ns1__GuardAggregateConfResponse::ret)
	{	if (soap_out_PointerTons1__GuardAggregateConf(soap, "ret", -1, &a->_ns1__GuardAggregateConfResponse::ret, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ret"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GuardAggregateConfResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GuardAggregateConfResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GuardAggregateConfResponse * SOAP_FMAC4 soap_in__ns1__GuardAggregateConfResponse(struct soap *soap, const char *tag, _ns1__GuardAggregateConfResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GuardAggregateConfResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GuardAggregateConfResponse, sizeof(_ns1__GuardAggregateConfResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GuardAggregateConfResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GuardAggregateConfResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ret1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__GuardAggregateConf(soap, "ret", &(a->_ns1__GuardAggregateConfResponse::ret), "ns1:GuardAggregateConf"))
				{	soap_flag_ret1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GuardAggregateConfResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GuardAggregateConfResponse, 0, sizeof(_ns1__GuardAggregateConfResponse), 0, soap_copy__ns1__GuardAggregateConfResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ret1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__GuardAggregateConfResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GuardAggregateConfResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GuardAggregateConfResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GuardAggregateConfResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GuardAggregateConfResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GuardAggregateConfResponse * SOAP_FMAC4 soap_get__ns1__GuardAggregateConfResponse(struct soap *soap, _ns1__GuardAggregateConfResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GuardAggregateConfResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GuardAggregateConfResponse * SOAP_FMAC2 soap_instantiate__ns1__GuardAggregateConfResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GuardAggregateConfResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GuardAggregateConfResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GuardAggregateConfResponse);
		if (size)
			*size = sizeof(_ns1__GuardAggregateConfResponse);
		((_ns1__GuardAggregateConfResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GuardAggregateConfResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GuardAggregateConfResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GuardAggregateConfResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GuardAggregateConfResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GuardAggregateConfResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GuardAggregateConfResponse %p -> %p\n", q, p));
	*(_ns1__GuardAggregateConfResponse*)p = *(_ns1__GuardAggregateConfResponse*)q;
}

void _ns1__getGuardAggregateConf::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__getGuardAggregateConf::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__getGuardAggregateConf::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getGuardAggregateConf(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getGuardAggregateConf(struct soap *soap, const char *tag, int id, const _ns1__getGuardAggregateConf *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getGuardAggregateConf), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getGuardAggregateConf::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getGuardAggregateConf(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getGuardAggregateConf * SOAP_FMAC4 soap_in__ns1__getGuardAggregateConf(struct soap *soap, const char *tag, _ns1__getGuardAggregateConf *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getGuardAggregateConf *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getGuardAggregateConf, sizeof(_ns1__getGuardAggregateConf), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getGuardAggregateConf)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getGuardAggregateConf *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getGuardAggregateConf *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getGuardAggregateConf, 0, sizeof(_ns1__getGuardAggregateConf), 0, soap_copy__ns1__getGuardAggregateConf);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__getGuardAggregateConf::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getGuardAggregateConf);
	if (this->soap_out(soap, tag?tag:"ns1:getGuardAggregateConf", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getGuardAggregateConf::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getGuardAggregateConf(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getGuardAggregateConf * SOAP_FMAC4 soap_get__ns1__getGuardAggregateConf(struct soap *soap, _ns1__getGuardAggregateConf *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getGuardAggregateConf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getGuardAggregateConf * SOAP_FMAC2 soap_instantiate__ns1__getGuardAggregateConf(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getGuardAggregateConf(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getGuardAggregateConf, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getGuardAggregateConf);
		if (size)
			*size = sizeof(_ns1__getGuardAggregateConf);
		((_ns1__getGuardAggregateConf*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getGuardAggregateConf[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getGuardAggregateConf);
		for (int i = 0; i < n; i++)
			((_ns1__getGuardAggregateConf*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getGuardAggregateConf*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getGuardAggregateConf(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getGuardAggregateConf %p -> %p\n", q, p));
	*(_ns1__getGuardAggregateConf*)p = *(_ns1__getGuardAggregateConf*)q;
}

void _ns1__setGuardAggEnableResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__setGuardAggEnableResponse::ret = NULL;
	/* transient soap skipped */
}

void _ns1__setGuardAggEnableResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__setGuardAggEnableResponse::ret);
	/* transient soap skipped */
}

int _ns1__setGuardAggEnableResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setGuardAggEnableResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setGuardAggEnableResponse(struct soap *soap, const char *tag, int id, const _ns1__setGuardAggEnableResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setGuardAggEnableResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ret", -1, &(a->_ns1__setGuardAggEnableResponse::ret), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__setGuardAggEnableResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setGuardAggEnableResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setGuardAggEnableResponse * SOAP_FMAC4 soap_in__ns1__setGuardAggEnableResponse(struct soap *soap, const char *tag, _ns1__setGuardAggEnableResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setGuardAggEnableResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setGuardAggEnableResponse, sizeof(_ns1__setGuardAggEnableResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__setGuardAggEnableResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__setGuardAggEnableResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ret1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ret", &(a->_ns1__setGuardAggEnableResponse::ret), "xsd:int"))
				{	soap_flag_ret1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setGuardAggEnableResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setGuardAggEnableResponse, 0, sizeof(_ns1__setGuardAggEnableResponse), 0, soap_copy__ns1__setGuardAggEnableResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__setGuardAggEnableResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__setGuardAggEnableResponse);
	if (this->soap_out(soap, tag?tag:"ns1:setGuardAggEnableResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setGuardAggEnableResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setGuardAggEnableResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setGuardAggEnableResponse * SOAP_FMAC4 soap_get__ns1__setGuardAggEnableResponse(struct soap *soap, _ns1__setGuardAggEnableResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setGuardAggEnableResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__setGuardAggEnableResponse * SOAP_FMAC2 soap_instantiate__ns1__setGuardAggEnableResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setGuardAggEnableResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__setGuardAggEnableResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setGuardAggEnableResponse);
		if (size)
			*size = sizeof(_ns1__setGuardAggEnableResponse);
		((_ns1__setGuardAggEnableResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setGuardAggEnableResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__setGuardAggEnableResponse);
		for (int i = 0; i < n; i++)
			((_ns1__setGuardAggEnableResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__setGuardAggEnableResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__setGuardAggEnableResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__setGuardAggEnableResponse %p -> %p\n", q, p));
	*(_ns1__setGuardAggEnableResponse*)p = *(_ns1__setGuardAggEnableResponse*)q;
}

void _ns1__setGuardAggEnable::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__setGuardAggEnable::enableagg);
	soap_default_int(soap, &this->_ns1__setGuardAggEnable::aggmask);
	/* transient soap skipped */
}

void _ns1__setGuardAggEnable::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__setGuardAggEnable::enableagg, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__setGuardAggEnable::aggmask, SOAP_TYPE_int);
	/* transient soap skipped */
}

int _ns1__setGuardAggEnable::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setGuardAggEnable(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setGuardAggEnable(struct soap *soap, const char *tag, int id, const _ns1__setGuardAggEnable *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setGuardAggEnable), type))
		return soap->error;
	if (soap_out_int(soap, "enableagg", -1, &(a->_ns1__setGuardAggEnable::enableagg), ""))
		return soap->error;
	if (soap_out_int(soap, "aggmask", -1, &(a->_ns1__setGuardAggEnable::aggmask), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__setGuardAggEnable::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setGuardAggEnable(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setGuardAggEnable * SOAP_FMAC4 soap_in__ns1__setGuardAggEnable(struct soap *soap, const char *tag, _ns1__setGuardAggEnable *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setGuardAggEnable *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setGuardAggEnable, sizeof(_ns1__setGuardAggEnable), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__setGuardAggEnable)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__setGuardAggEnable *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_enableagg1 = 1;
	size_t soap_flag_aggmask1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_enableagg1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "enableagg", &(a->_ns1__setGuardAggEnable::enableagg), "xsd:int"))
				{	soap_flag_enableagg1--;
					continue;
				}
			if (soap_flag_aggmask1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "aggmask", &(a->_ns1__setGuardAggEnable::aggmask), "xsd:int"))
				{	soap_flag_aggmask1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setGuardAggEnable *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setGuardAggEnable, 0, sizeof(_ns1__setGuardAggEnable), 0, soap_copy__ns1__setGuardAggEnable);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_enableagg1 > 0 || soap_flag_aggmask1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__setGuardAggEnable::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__setGuardAggEnable);
	if (this->soap_out(soap, tag?tag:"ns1:setGuardAggEnable", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setGuardAggEnable::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setGuardAggEnable(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setGuardAggEnable * SOAP_FMAC4 soap_get__ns1__setGuardAggEnable(struct soap *soap, _ns1__setGuardAggEnable *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setGuardAggEnable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__setGuardAggEnable * SOAP_FMAC2 soap_instantiate__ns1__setGuardAggEnable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setGuardAggEnable(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__setGuardAggEnable, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setGuardAggEnable);
		if (size)
			*size = sizeof(_ns1__setGuardAggEnable);
		((_ns1__setGuardAggEnable*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setGuardAggEnable[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__setGuardAggEnable);
		for (int i = 0; i < n; i++)
			((_ns1__setGuardAggEnable*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__setGuardAggEnable*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__setGuardAggEnable(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__setGuardAggEnable %p -> %p\n", q, p));
	*(_ns1__setGuardAggEnable*)p = *(_ns1__setGuardAggEnable*)q;
}

void _ns1__getGuardAggregateRouteInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__getGuardAggregateRouteInfo::count);
	soap_default_int(soap, &this->_ns1__getGuardAggregateRouteInfo::offset);
	/* transient soap skipped */
}

void _ns1__getGuardAggregateRouteInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__getGuardAggregateRouteInfo::count, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__getGuardAggregateRouteInfo::offset, SOAP_TYPE_int);
	/* transient soap skipped */
}

int _ns1__getGuardAggregateRouteInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getGuardAggregateRouteInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getGuardAggregateRouteInfo(struct soap *soap, const char *tag, int id, const _ns1__getGuardAggregateRouteInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getGuardAggregateRouteInfo), type))
		return soap->error;
	if (soap_out_int(soap, "count", -1, &(a->_ns1__getGuardAggregateRouteInfo::count), ""))
		return soap->error;
	if (soap_out_int(soap, "offset", -1, &(a->_ns1__getGuardAggregateRouteInfo::offset), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getGuardAggregateRouteInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getGuardAggregateRouteInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getGuardAggregateRouteInfo * SOAP_FMAC4 soap_in__ns1__getGuardAggregateRouteInfo(struct soap *soap, const char *tag, _ns1__getGuardAggregateRouteInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getGuardAggregateRouteInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getGuardAggregateRouteInfo, sizeof(_ns1__getGuardAggregateRouteInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getGuardAggregateRouteInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getGuardAggregateRouteInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_count1 = 1;
	size_t soap_flag_offset1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_count1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "count", &(a->_ns1__getGuardAggregateRouteInfo::count), "xsd:int"))
				{	soap_flag_count1--;
					continue;
				}
			if (soap_flag_offset1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "offset", &(a->_ns1__getGuardAggregateRouteInfo::offset), "xsd:int"))
				{	soap_flag_offset1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getGuardAggregateRouteInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getGuardAggregateRouteInfo, 0, sizeof(_ns1__getGuardAggregateRouteInfo), 0, soap_copy__ns1__getGuardAggregateRouteInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_count1 > 0 || soap_flag_offset1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__getGuardAggregateRouteInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getGuardAggregateRouteInfo);
	if (this->soap_out(soap, tag?tag:"ns1:getGuardAggregateRouteInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getGuardAggregateRouteInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getGuardAggregateRouteInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getGuardAggregateRouteInfo * SOAP_FMAC4 soap_get__ns1__getGuardAggregateRouteInfo(struct soap *soap, _ns1__getGuardAggregateRouteInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getGuardAggregateRouteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getGuardAggregateRouteInfo * SOAP_FMAC2 soap_instantiate__ns1__getGuardAggregateRouteInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getGuardAggregateRouteInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getGuardAggregateRouteInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getGuardAggregateRouteInfo);
		if (size)
			*size = sizeof(_ns1__getGuardAggregateRouteInfo);
		((_ns1__getGuardAggregateRouteInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getGuardAggregateRouteInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getGuardAggregateRouteInfo);
		for (int i = 0; i < n; i++)
			((_ns1__getGuardAggregateRouteInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getGuardAggregateRouteInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getGuardAggregateRouteInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getGuardAggregateRouteInfo %p -> %p\n", q, p));
	*(_ns1__getGuardAggregateRouteInfo*)p = *(_ns1__getGuardAggregateRouteInfo*)q;
}

void _ns1__setGuardConfigFinishResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__setGuardConfigFinishResponse::ret = NULL;
	/* transient soap skipped */
}

void _ns1__setGuardConfigFinishResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__setGuardConfigFinishResponse::ret);
	/* transient soap skipped */
}

int _ns1__setGuardConfigFinishResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setGuardConfigFinishResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setGuardConfigFinishResponse(struct soap *soap, const char *tag, int id, const _ns1__setGuardConfigFinishResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setGuardConfigFinishResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ret", -1, &(a->_ns1__setGuardConfigFinishResponse::ret), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__setGuardConfigFinishResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setGuardConfigFinishResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setGuardConfigFinishResponse * SOAP_FMAC4 soap_in__ns1__setGuardConfigFinishResponse(struct soap *soap, const char *tag, _ns1__setGuardConfigFinishResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setGuardConfigFinishResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setGuardConfigFinishResponse, sizeof(_ns1__setGuardConfigFinishResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__setGuardConfigFinishResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__setGuardConfigFinishResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ret1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ret", &(a->_ns1__setGuardConfigFinishResponse::ret), "xsd:int"))
				{	soap_flag_ret1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setGuardConfigFinishResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setGuardConfigFinishResponse, 0, sizeof(_ns1__setGuardConfigFinishResponse), 0, soap_copy__ns1__setGuardConfigFinishResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__setGuardConfigFinishResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__setGuardConfigFinishResponse);
	if (this->soap_out(soap, tag?tag:"ns1:setGuardConfigFinishResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setGuardConfigFinishResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setGuardConfigFinishResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setGuardConfigFinishResponse * SOAP_FMAC4 soap_get__ns1__setGuardConfigFinishResponse(struct soap *soap, _ns1__setGuardConfigFinishResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setGuardConfigFinishResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__setGuardConfigFinishResponse * SOAP_FMAC2 soap_instantiate__ns1__setGuardConfigFinishResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setGuardConfigFinishResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__setGuardConfigFinishResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setGuardConfigFinishResponse);
		if (size)
			*size = sizeof(_ns1__setGuardConfigFinishResponse);
		((_ns1__setGuardConfigFinishResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setGuardConfigFinishResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__setGuardConfigFinishResponse);
		for (int i = 0; i < n; i++)
			((_ns1__setGuardConfigFinishResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__setGuardConfigFinishResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__setGuardConfigFinishResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__setGuardConfigFinishResponse %p -> %p\n", q, p));
	*(_ns1__setGuardConfigFinishResponse*)p = *(_ns1__setGuardConfigFinishResponse*)q;
}

void _ns1__setGuardConfigFinish::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__setGuardConfigFinish::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__setGuardConfigFinish::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setGuardConfigFinish(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setGuardConfigFinish(struct soap *soap, const char *tag, int id, const _ns1__setGuardConfigFinish *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setGuardConfigFinish), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__setGuardConfigFinish::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setGuardConfigFinish(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setGuardConfigFinish * SOAP_FMAC4 soap_in__ns1__setGuardConfigFinish(struct soap *soap, const char *tag, _ns1__setGuardConfigFinish *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setGuardConfigFinish *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setGuardConfigFinish, sizeof(_ns1__setGuardConfigFinish), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__setGuardConfigFinish)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__setGuardConfigFinish *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setGuardConfigFinish *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setGuardConfigFinish, 0, sizeof(_ns1__setGuardConfigFinish), 0, soap_copy__ns1__setGuardConfigFinish);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__setGuardConfigFinish::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__setGuardConfigFinish);
	if (this->soap_out(soap, tag?tag:"ns1:setGuardConfigFinish", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setGuardConfigFinish::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setGuardConfigFinish(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setGuardConfigFinish * SOAP_FMAC4 soap_get__ns1__setGuardConfigFinish(struct soap *soap, _ns1__setGuardConfigFinish *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setGuardConfigFinish(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__setGuardConfigFinish * SOAP_FMAC2 soap_instantiate__ns1__setGuardConfigFinish(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setGuardConfigFinish(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__setGuardConfigFinish, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setGuardConfigFinish);
		if (size)
			*size = sizeof(_ns1__setGuardConfigFinish);
		((_ns1__setGuardConfigFinish*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setGuardConfigFinish[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__setGuardConfigFinish);
		for (int i = 0; i < n; i++)
			((_ns1__setGuardConfigFinish*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__setGuardConfigFinish*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__setGuardConfigFinish(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__setGuardConfigFinish %p -> %p\n", q, p));
	*(_ns1__setGuardConfigFinish*)p = *(_ns1__setGuardConfigFinish*)q;
}

void _ns1__getGuardRouteInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__getGuardRouteInfoResponse::ret = NULL;
	/* transient soap skipped */
}

void _ns1__getGuardRouteInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__Result(soap, &this->_ns1__getGuardRouteInfoResponse::ret);
	/* transient soap skipped */
}

int _ns1__getGuardRouteInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getGuardRouteInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getGuardRouteInfoResponse(struct soap *soap, const char *tag, int id, const _ns1__getGuardRouteInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getGuardRouteInfoResponse), type))
		return soap->error;
	if (a->_ns1__getGuardRouteInfoResponse::ret)
	{	if (soap_out_PointerTons1__Result(soap, "ret", -1, &a->_ns1__getGuardRouteInfoResponse::ret, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "ret"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getGuardRouteInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getGuardRouteInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getGuardRouteInfoResponse * SOAP_FMAC4 soap_in__ns1__getGuardRouteInfoResponse(struct soap *soap, const char *tag, _ns1__getGuardRouteInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getGuardRouteInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getGuardRouteInfoResponse, sizeof(_ns1__getGuardRouteInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getGuardRouteInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getGuardRouteInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ret1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__Result(soap, "ret", &(a->_ns1__getGuardRouteInfoResponse::ret), "ns1:Result"))
				{	soap_flag_ret1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getGuardRouteInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getGuardRouteInfoResponse, 0, sizeof(_ns1__getGuardRouteInfoResponse), 0, soap_copy__ns1__getGuardRouteInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ret1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__getGuardRouteInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getGuardRouteInfoResponse);
	if (this->soap_out(soap, tag?tag:"ns1:getGuardRouteInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getGuardRouteInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getGuardRouteInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getGuardRouteInfoResponse * SOAP_FMAC4 soap_get__ns1__getGuardRouteInfoResponse(struct soap *soap, _ns1__getGuardRouteInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getGuardRouteInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getGuardRouteInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__getGuardRouteInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getGuardRouteInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getGuardRouteInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getGuardRouteInfoResponse);
		if (size)
			*size = sizeof(_ns1__getGuardRouteInfoResponse);
		((_ns1__getGuardRouteInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getGuardRouteInfoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getGuardRouteInfoResponse);
		for (int i = 0; i < n; i++)
			((_ns1__getGuardRouteInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getGuardRouteInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getGuardRouteInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getGuardRouteInfoResponse %p -> %p\n", q, p));
	*(_ns1__getGuardRouteInfoResponse*)p = *(_ns1__getGuardRouteInfoResponse*)q;
}

void _ns1__getGuardRouteInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__getGuardRouteInfo::count);
	soap_default_int(soap, &this->_ns1__getGuardRouteInfo::offset);
	/* transient soap skipped */
}

void _ns1__getGuardRouteInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__getGuardRouteInfo::count, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__getGuardRouteInfo::offset, SOAP_TYPE_int);
	/* transient soap skipped */
}

int _ns1__getGuardRouteInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__getGuardRouteInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getGuardRouteInfo(struct soap *soap, const char *tag, int id, const _ns1__getGuardRouteInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__getGuardRouteInfo), type))
		return soap->error;
	if (soap_out_int(soap, "count", -1, &(a->_ns1__getGuardRouteInfo::count), ""))
		return soap->error;
	if (soap_out_int(soap, "offset", -1, &(a->_ns1__getGuardRouteInfo::offset), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__getGuardRouteInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__getGuardRouteInfo(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__getGuardRouteInfo * SOAP_FMAC4 soap_in__ns1__getGuardRouteInfo(struct soap *soap, const char *tag, _ns1__getGuardRouteInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__getGuardRouteInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__getGuardRouteInfo, sizeof(_ns1__getGuardRouteInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__getGuardRouteInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__getGuardRouteInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_count1 = 1;
	size_t soap_flag_offset1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_count1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "count", &(a->_ns1__getGuardRouteInfo::count), "xsd:int"))
				{	soap_flag_count1--;
					continue;
				}
			if (soap_flag_offset1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "offset", &(a->_ns1__getGuardRouteInfo::offset), "xsd:int"))
				{	soap_flag_offset1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__getGuardRouteInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__getGuardRouteInfo, 0, sizeof(_ns1__getGuardRouteInfo), 0, soap_copy__ns1__getGuardRouteInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_count1 > 0 || soap_flag_offset1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__getGuardRouteInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__getGuardRouteInfo);
	if (this->soap_out(soap, tag?tag:"ns1:getGuardRouteInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__getGuardRouteInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__getGuardRouteInfo(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__getGuardRouteInfo * SOAP_FMAC4 soap_get__ns1__getGuardRouteInfo(struct soap *soap, _ns1__getGuardRouteInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__getGuardRouteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__getGuardRouteInfo * SOAP_FMAC2 soap_instantiate__ns1__getGuardRouteInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__getGuardRouteInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__getGuardRouteInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getGuardRouteInfo);
		if (size)
			*size = sizeof(_ns1__getGuardRouteInfo);
		((_ns1__getGuardRouteInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__getGuardRouteInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__getGuardRouteInfo);
		for (int i = 0; i < n; i++)
			((_ns1__getGuardRouteInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__getGuardRouteInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__getGuardRouteInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__getGuardRouteInfo %p -> %p\n", q, p));
	*(_ns1__getGuardRouteInfo*)p = *(_ns1__getGuardRouteInfo*)q;
}

void _ns1__modGuardRouteResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__modGuardRouteResponse::ret = NULL;
	/* transient soap skipped */
}

void _ns1__modGuardRouteResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__modGuardRouteResponse::ret);
	/* transient soap skipped */
}

int _ns1__modGuardRouteResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__modGuardRouteResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__modGuardRouteResponse(struct soap *soap, const char *tag, int id, const _ns1__modGuardRouteResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__modGuardRouteResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ret", -1, &(a->_ns1__modGuardRouteResponse::ret), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__modGuardRouteResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__modGuardRouteResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__modGuardRouteResponse * SOAP_FMAC4 soap_in__ns1__modGuardRouteResponse(struct soap *soap, const char *tag, _ns1__modGuardRouteResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__modGuardRouteResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__modGuardRouteResponse, sizeof(_ns1__modGuardRouteResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__modGuardRouteResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__modGuardRouteResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ret1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ret", &(a->_ns1__modGuardRouteResponse::ret), "xsd:int"))
				{	soap_flag_ret1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__modGuardRouteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__modGuardRouteResponse, 0, sizeof(_ns1__modGuardRouteResponse), 0, soap_copy__ns1__modGuardRouteResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__modGuardRouteResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__modGuardRouteResponse);
	if (this->soap_out(soap, tag?tag:"ns1:modGuardRouteResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__modGuardRouteResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__modGuardRouteResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__modGuardRouteResponse * SOAP_FMAC4 soap_get__ns1__modGuardRouteResponse(struct soap *soap, _ns1__modGuardRouteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__modGuardRouteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__modGuardRouteResponse * SOAP_FMAC2 soap_instantiate__ns1__modGuardRouteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__modGuardRouteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__modGuardRouteResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__modGuardRouteResponse);
		if (size)
			*size = sizeof(_ns1__modGuardRouteResponse);
		((_ns1__modGuardRouteResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__modGuardRouteResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__modGuardRouteResponse);
		for (int i = 0; i < n; i++)
			((_ns1__modGuardRouteResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__modGuardRouteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__modGuardRouteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__modGuardRouteResponse %p -> %p\n", q, p));
	*(_ns1__modGuardRouteResponse*)p = *(_ns1__modGuardRouteResponse*)q;
}

void _ns1__modGuardRoute::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__modGuardRoute::delRoute);
	soap_default_std__string(soap, &this->_ns1__modGuardRoute::addRoute);
	/* transient soap skipped */
}

void _ns1__modGuardRoute::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__modGuardRoute::delRoute, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__modGuardRoute::delRoute);
	soap_embedded(soap, &this->_ns1__modGuardRoute::addRoute, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__modGuardRoute::addRoute);
	/* transient soap skipped */
}

int _ns1__modGuardRoute::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__modGuardRoute(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__modGuardRoute(struct soap *soap, const char *tag, int id, const _ns1__modGuardRoute *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__modGuardRoute), type))
		return soap->error;
	if (soap_out_std__string(soap, "delRoute", -1, &(a->_ns1__modGuardRoute::delRoute), ""))
		return soap->error;
	if (soap_out_std__string(soap, "addRoute", -1, &(a->_ns1__modGuardRoute::addRoute), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__modGuardRoute::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__modGuardRoute(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__modGuardRoute * SOAP_FMAC4 soap_in__ns1__modGuardRoute(struct soap *soap, const char *tag, _ns1__modGuardRoute *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__modGuardRoute *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__modGuardRoute, sizeof(_ns1__modGuardRoute), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__modGuardRoute)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__modGuardRoute *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_delRoute1 = 1;
	size_t soap_flag_addRoute1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_delRoute1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "delRoute", &(a->_ns1__modGuardRoute::delRoute), "xsd:string"))
				{	soap_flag_delRoute1--;
					continue;
				}
			if (soap_flag_addRoute1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "addRoute", &(a->_ns1__modGuardRoute::addRoute), "xsd:string"))
				{	soap_flag_addRoute1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__modGuardRoute *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__modGuardRoute, 0, sizeof(_ns1__modGuardRoute), 0, soap_copy__ns1__modGuardRoute);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_delRoute1 > 0 || soap_flag_addRoute1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__modGuardRoute::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__modGuardRoute);
	if (this->soap_out(soap, tag?tag:"ns1:modGuardRoute", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__modGuardRoute::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__modGuardRoute(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__modGuardRoute * SOAP_FMAC4 soap_get__ns1__modGuardRoute(struct soap *soap, _ns1__modGuardRoute *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__modGuardRoute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__modGuardRoute * SOAP_FMAC2 soap_instantiate__ns1__modGuardRoute(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__modGuardRoute(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__modGuardRoute, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__modGuardRoute);
		if (size)
			*size = sizeof(_ns1__modGuardRoute);
		((_ns1__modGuardRoute*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__modGuardRoute[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__modGuardRoute);
		for (int i = 0; i < n; i++)
			((_ns1__modGuardRoute*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__modGuardRoute*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__modGuardRoute(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__modGuardRoute %p -> %p\n", q, p));
	*(_ns1__modGuardRoute*)p = *(_ns1__modGuardRoute*)q;
}

void _ns1__removeGuardRouteRangeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__removeGuardRouteRangeResponse::ret = NULL;
	/* transient soap skipped */
}

void _ns1__removeGuardRouteRangeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__removeGuardRouteRangeResponse::ret);
	/* transient soap skipped */
}

int _ns1__removeGuardRouteRangeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__removeGuardRouteRangeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__removeGuardRouteRangeResponse(struct soap *soap, const char *tag, int id, const _ns1__removeGuardRouteRangeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__removeGuardRouteRangeResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ret", -1, &(a->_ns1__removeGuardRouteRangeResponse::ret), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__removeGuardRouteRangeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__removeGuardRouteRangeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__removeGuardRouteRangeResponse * SOAP_FMAC4 soap_in__ns1__removeGuardRouteRangeResponse(struct soap *soap, const char *tag, _ns1__removeGuardRouteRangeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__removeGuardRouteRangeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__removeGuardRouteRangeResponse, sizeof(_ns1__removeGuardRouteRangeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__removeGuardRouteRangeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__removeGuardRouteRangeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ret1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ret", &(a->_ns1__removeGuardRouteRangeResponse::ret), "xsd:int"))
				{	soap_flag_ret1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__removeGuardRouteRangeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__removeGuardRouteRangeResponse, 0, sizeof(_ns1__removeGuardRouteRangeResponse), 0, soap_copy__ns1__removeGuardRouteRangeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__removeGuardRouteRangeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__removeGuardRouteRangeResponse);
	if (this->soap_out(soap, tag?tag:"ns1:removeGuardRouteRangeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__removeGuardRouteRangeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__removeGuardRouteRangeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__removeGuardRouteRangeResponse * SOAP_FMAC4 soap_get__ns1__removeGuardRouteRangeResponse(struct soap *soap, _ns1__removeGuardRouteRangeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__removeGuardRouteRangeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__removeGuardRouteRangeResponse * SOAP_FMAC2 soap_instantiate__ns1__removeGuardRouteRangeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__removeGuardRouteRangeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__removeGuardRouteRangeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__removeGuardRouteRangeResponse);
		if (size)
			*size = sizeof(_ns1__removeGuardRouteRangeResponse);
		((_ns1__removeGuardRouteRangeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__removeGuardRouteRangeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__removeGuardRouteRangeResponse);
		for (int i = 0; i < n; i++)
			((_ns1__removeGuardRouteRangeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__removeGuardRouteRangeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__removeGuardRouteRangeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__removeGuardRouteRangeResponse %p -> %p\n", q, p));
	*(_ns1__removeGuardRouteRangeResponse*)p = *(_ns1__removeGuardRouteRangeResponse*)q;
}

void _ns1__removeGuardRouteRange::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__removeGuardRouteRange::startIp);
	soap_default_std__string(soap, &this->_ns1__removeGuardRouteRange::endIp);
	/* transient soap skipped */
}

void _ns1__removeGuardRouteRange::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__removeGuardRouteRange::startIp, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__removeGuardRouteRange::startIp);
	soap_embedded(soap, &this->_ns1__removeGuardRouteRange::endIp, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__removeGuardRouteRange::endIp);
	/* transient soap skipped */
}

int _ns1__removeGuardRouteRange::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__removeGuardRouteRange(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__removeGuardRouteRange(struct soap *soap, const char *tag, int id, const _ns1__removeGuardRouteRange *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__removeGuardRouteRange), type))
		return soap->error;
	if (soap_out_std__string(soap, "startIp", -1, &(a->_ns1__removeGuardRouteRange::startIp), ""))
		return soap->error;
	if (soap_out_std__string(soap, "endIp", -1, &(a->_ns1__removeGuardRouteRange::endIp), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__removeGuardRouteRange::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__removeGuardRouteRange(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__removeGuardRouteRange * SOAP_FMAC4 soap_in__ns1__removeGuardRouteRange(struct soap *soap, const char *tag, _ns1__removeGuardRouteRange *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__removeGuardRouteRange *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__removeGuardRouteRange, sizeof(_ns1__removeGuardRouteRange), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__removeGuardRouteRange)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__removeGuardRouteRange *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_startIp1 = 1;
	size_t soap_flag_endIp1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_startIp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "startIp", &(a->_ns1__removeGuardRouteRange::startIp), "xsd:string"))
				{	soap_flag_startIp1--;
					continue;
				}
			if (soap_flag_endIp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "endIp", &(a->_ns1__removeGuardRouteRange::endIp), "xsd:string"))
				{	soap_flag_endIp1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__removeGuardRouteRange *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__removeGuardRouteRange, 0, sizeof(_ns1__removeGuardRouteRange), 0, soap_copy__ns1__removeGuardRouteRange);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_startIp1 > 0 || soap_flag_endIp1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__removeGuardRouteRange::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__removeGuardRouteRange);
	if (this->soap_out(soap, tag?tag:"ns1:removeGuardRouteRange", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__removeGuardRouteRange::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__removeGuardRouteRange(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__removeGuardRouteRange * SOAP_FMAC4 soap_get__ns1__removeGuardRouteRange(struct soap *soap, _ns1__removeGuardRouteRange *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__removeGuardRouteRange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__removeGuardRouteRange * SOAP_FMAC2 soap_instantiate__ns1__removeGuardRouteRange(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__removeGuardRouteRange(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__removeGuardRouteRange, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__removeGuardRouteRange);
		if (size)
			*size = sizeof(_ns1__removeGuardRouteRange);
		((_ns1__removeGuardRouteRange*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__removeGuardRouteRange[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__removeGuardRouteRange);
		for (int i = 0; i < n; i++)
			((_ns1__removeGuardRouteRange*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__removeGuardRouteRange*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__removeGuardRouteRange(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__removeGuardRouteRange %p -> %p\n", q, p));
	*(_ns1__removeGuardRouteRange*)p = *(_ns1__removeGuardRouteRange*)q;
}

void _ns1__addGuardRouteRangeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__addGuardRouteRangeResponse::ret = NULL;
	/* transient soap skipped */
}

void _ns1__addGuardRouteRangeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__addGuardRouteRangeResponse::ret);
	/* transient soap skipped */
}

int _ns1__addGuardRouteRangeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__addGuardRouteRangeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__addGuardRouteRangeResponse(struct soap *soap, const char *tag, int id, const _ns1__addGuardRouteRangeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__addGuardRouteRangeResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ret", -1, &(a->_ns1__addGuardRouteRangeResponse::ret), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__addGuardRouteRangeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__addGuardRouteRangeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__addGuardRouteRangeResponse * SOAP_FMAC4 soap_in__ns1__addGuardRouteRangeResponse(struct soap *soap, const char *tag, _ns1__addGuardRouteRangeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__addGuardRouteRangeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__addGuardRouteRangeResponse, sizeof(_ns1__addGuardRouteRangeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__addGuardRouteRangeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__addGuardRouteRangeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ret1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ret", &(a->_ns1__addGuardRouteRangeResponse::ret), "xsd:int"))
				{	soap_flag_ret1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__addGuardRouteRangeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__addGuardRouteRangeResponse, 0, sizeof(_ns1__addGuardRouteRangeResponse), 0, soap_copy__ns1__addGuardRouteRangeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__addGuardRouteRangeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__addGuardRouteRangeResponse);
	if (this->soap_out(soap, tag?tag:"ns1:addGuardRouteRangeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__addGuardRouteRangeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__addGuardRouteRangeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__addGuardRouteRangeResponse * SOAP_FMAC4 soap_get__ns1__addGuardRouteRangeResponse(struct soap *soap, _ns1__addGuardRouteRangeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__addGuardRouteRangeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__addGuardRouteRangeResponse * SOAP_FMAC2 soap_instantiate__ns1__addGuardRouteRangeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__addGuardRouteRangeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__addGuardRouteRangeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__addGuardRouteRangeResponse);
		if (size)
			*size = sizeof(_ns1__addGuardRouteRangeResponse);
		((_ns1__addGuardRouteRangeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__addGuardRouteRangeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__addGuardRouteRangeResponse);
		for (int i = 0; i < n; i++)
			((_ns1__addGuardRouteRangeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__addGuardRouteRangeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__addGuardRouteRangeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__addGuardRouteRangeResponse %p -> %p\n", q, p));
	*(_ns1__addGuardRouteRangeResponse*)p = *(_ns1__addGuardRouteRangeResponse*)q;
}

void _ns1__addGuardRouteRange::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__addGuardRouteRange::startIp);
	soap_default_std__string(soap, &this->_ns1__addGuardRouteRange::endIp);
	/* transient soap skipped */
}

void _ns1__addGuardRouteRange::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__addGuardRouteRange::startIp, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__addGuardRouteRange::startIp);
	soap_embedded(soap, &this->_ns1__addGuardRouteRange::endIp, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__addGuardRouteRange::endIp);
	/* transient soap skipped */
}

int _ns1__addGuardRouteRange::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__addGuardRouteRange(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__addGuardRouteRange(struct soap *soap, const char *tag, int id, const _ns1__addGuardRouteRange *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__addGuardRouteRange), type))
		return soap->error;
	if (soap_out_std__string(soap, "startIp", -1, &(a->_ns1__addGuardRouteRange::startIp), ""))
		return soap->error;
	if (soap_out_std__string(soap, "endIp", -1, &(a->_ns1__addGuardRouteRange::endIp), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__addGuardRouteRange::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__addGuardRouteRange(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__addGuardRouteRange * SOAP_FMAC4 soap_in__ns1__addGuardRouteRange(struct soap *soap, const char *tag, _ns1__addGuardRouteRange *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__addGuardRouteRange *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__addGuardRouteRange, sizeof(_ns1__addGuardRouteRange), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__addGuardRouteRange)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__addGuardRouteRange *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_startIp1 = 1;
	size_t soap_flag_endIp1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_startIp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "startIp", &(a->_ns1__addGuardRouteRange::startIp), "xsd:string"))
				{	soap_flag_startIp1--;
					continue;
				}
			if (soap_flag_endIp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "endIp", &(a->_ns1__addGuardRouteRange::endIp), "xsd:string"))
				{	soap_flag_endIp1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__addGuardRouteRange *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__addGuardRouteRange, 0, sizeof(_ns1__addGuardRouteRange), 0, soap_copy__ns1__addGuardRouteRange);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_startIp1 > 0 || soap_flag_endIp1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__addGuardRouteRange::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__addGuardRouteRange);
	if (this->soap_out(soap, tag?tag:"ns1:addGuardRouteRange", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__addGuardRouteRange::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__addGuardRouteRange(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__addGuardRouteRange * SOAP_FMAC4 soap_get__ns1__addGuardRouteRange(struct soap *soap, _ns1__addGuardRouteRange *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__addGuardRouteRange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__addGuardRouteRange * SOAP_FMAC2 soap_instantiate__ns1__addGuardRouteRange(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__addGuardRouteRange(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__addGuardRouteRange, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__addGuardRouteRange);
		if (size)
			*size = sizeof(_ns1__addGuardRouteRange);
		((_ns1__addGuardRouteRange*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__addGuardRouteRange[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__addGuardRouteRange);
		for (int i = 0; i < n; i++)
			((_ns1__addGuardRouteRange*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__addGuardRouteRange*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__addGuardRouteRange(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__addGuardRouteRange %p -> %p\n", q, p));
	*(_ns1__addGuardRouteRange*)p = *(_ns1__addGuardRouteRange*)q;
}

void _ns1__removeGuardRouteResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__removeGuardRouteResponse::ret = NULL;
	/* transient soap skipped */
}

void _ns1__removeGuardRouteResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__removeGuardRouteResponse::ret);
	/* transient soap skipped */
}

int _ns1__removeGuardRouteResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__removeGuardRouteResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__removeGuardRouteResponse(struct soap *soap, const char *tag, int id, const _ns1__removeGuardRouteResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__removeGuardRouteResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ret", -1, &(a->_ns1__removeGuardRouteResponse::ret), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__removeGuardRouteResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__removeGuardRouteResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__removeGuardRouteResponse * SOAP_FMAC4 soap_in__ns1__removeGuardRouteResponse(struct soap *soap, const char *tag, _ns1__removeGuardRouteResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__removeGuardRouteResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__removeGuardRouteResponse, sizeof(_ns1__removeGuardRouteResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__removeGuardRouteResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__removeGuardRouteResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ret1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ret", &(a->_ns1__removeGuardRouteResponse::ret), "xsd:int"))
				{	soap_flag_ret1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__removeGuardRouteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__removeGuardRouteResponse, 0, sizeof(_ns1__removeGuardRouteResponse), 0, soap_copy__ns1__removeGuardRouteResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__removeGuardRouteResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__removeGuardRouteResponse);
	if (this->soap_out(soap, tag?tag:"ns1:removeGuardRouteResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__removeGuardRouteResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__removeGuardRouteResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__removeGuardRouteResponse * SOAP_FMAC4 soap_get__ns1__removeGuardRouteResponse(struct soap *soap, _ns1__removeGuardRouteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__removeGuardRouteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__removeGuardRouteResponse * SOAP_FMAC2 soap_instantiate__ns1__removeGuardRouteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__removeGuardRouteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__removeGuardRouteResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__removeGuardRouteResponse);
		if (size)
			*size = sizeof(_ns1__removeGuardRouteResponse);
		((_ns1__removeGuardRouteResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__removeGuardRouteResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__removeGuardRouteResponse);
		for (int i = 0; i < n; i++)
			((_ns1__removeGuardRouteResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__removeGuardRouteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__removeGuardRouteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__removeGuardRouteResponse %p -> %p\n", q, p));
	*(_ns1__removeGuardRouteResponse*)p = *(_ns1__removeGuardRouteResponse*)q;
}

void _ns1__removeGuardRoute::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__removeGuardRoute::destIp);
	soap_default_std__string(soap, &this->_ns1__removeGuardRoute::destNetmask);
	/* transient soap skipped */
}

void _ns1__removeGuardRoute::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__removeGuardRoute::destIp, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__removeGuardRoute::destIp);
	soap_embedded(soap, &this->_ns1__removeGuardRoute::destNetmask, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__removeGuardRoute::destNetmask);
	/* transient soap skipped */
}

int _ns1__removeGuardRoute::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__removeGuardRoute(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__removeGuardRoute(struct soap *soap, const char *tag, int id, const _ns1__removeGuardRoute *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__removeGuardRoute), type))
		return soap->error;
	if (soap_out_std__string(soap, "destIp", -1, &(a->_ns1__removeGuardRoute::destIp), ""))
		return soap->error;
	if (soap_out_std__string(soap, "destNetmask", -1, &(a->_ns1__removeGuardRoute::destNetmask), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__removeGuardRoute::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__removeGuardRoute(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__removeGuardRoute * SOAP_FMAC4 soap_in__ns1__removeGuardRoute(struct soap *soap, const char *tag, _ns1__removeGuardRoute *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__removeGuardRoute *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__removeGuardRoute, sizeof(_ns1__removeGuardRoute), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__removeGuardRoute)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__removeGuardRoute *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_destIp1 = 1;
	size_t soap_flag_destNetmask1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_destIp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "destIp", &(a->_ns1__removeGuardRoute::destIp), "xsd:string"))
				{	soap_flag_destIp1--;
					continue;
				}
			if (soap_flag_destNetmask1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "destNetmask", &(a->_ns1__removeGuardRoute::destNetmask), "xsd:string"))
				{	soap_flag_destNetmask1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__removeGuardRoute *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__removeGuardRoute, 0, sizeof(_ns1__removeGuardRoute), 0, soap_copy__ns1__removeGuardRoute);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_destIp1 > 0 || soap_flag_destNetmask1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__removeGuardRoute::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__removeGuardRoute);
	if (this->soap_out(soap, tag?tag:"ns1:removeGuardRoute", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__removeGuardRoute::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__removeGuardRoute(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__removeGuardRoute * SOAP_FMAC4 soap_get__ns1__removeGuardRoute(struct soap *soap, _ns1__removeGuardRoute *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__removeGuardRoute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__removeGuardRoute * SOAP_FMAC2 soap_instantiate__ns1__removeGuardRoute(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__removeGuardRoute(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__removeGuardRoute, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__removeGuardRoute);
		if (size)
			*size = sizeof(_ns1__removeGuardRoute);
		((_ns1__removeGuardRoute*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__removeGuardRoute[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__removeGuardRoute);
		for (int i = 0; i < n; i++)
			((_ns1__removeGuardRoute*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__removeGuardRoute*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__removeGuardRoute(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__removeGuardRoute %p -> %p\n", q, p));
	*(_ns1__removeGuardRoute*)p = *(_ns1__removeGuardRoute*)q;
}

void _ns1__addGuardRouteResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__addGuardRouteResponse::ret = NULL;
	/* transient soap skipped */
}

void _ns1__addGuardRouteResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__addGuardRouteResponse::ret);
	/* transient soap skipped */
}

int _ns1__addGuardRouteResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__addGuardRouteResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__addGuardRouteResponse(struct soap *soap, const char *tag, int id, const _ns1__addGuardRouteResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__addGuardRouteResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ret", -1, &(a->_ns1__addGuardRouteResponse::ret), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__addGuardRouteResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__addGuardRouteResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__addGuardRouteResponse * SOAP_FMAC4 soap_in__ns1__addGuardRouteResponse(struct soap *soap, const char *tag, _ns1__addGuardRouteResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__addGuardRouteResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__addGuardRouteResponse, sizeof(_ns1__addGuardRouteResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__addGuardRouteResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__addGuardRouteResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ret1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ret", &(a->_ns1__addGuardRouteResponse::ret), "xsd:int"))
				{	soap_flag_ret1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__addGuardRouteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__addGuardRouteResponse, 0, sizeof(_ns1__addGuardRouteResponse), 0, soap_copy__ns1__addGuardRouteResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__addGuardRouteResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__addGuardRouteResponse);
	if (this->soap_out(soap, tag?tag:"ns1:addGuardRouteResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__addGuardRouteResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__addGuardRouteResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__addGuardRouteResponse * SOAP_FMAC4 soap_get__ns1__addGuardRouteResponse(struct soap *soap, _ns1__addGuardRouteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__addGuardRouteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__addGuardRouteResponse * SOAP_FMAC2 soap_instantiate__ns1__addGuardRouteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__addGuardRouteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__addGuardRouteResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__addGuardRouteResponse);
		if (size)
			*size = sizeof(_ns1__addGuardRouteResponse);
		((_ns1__addGuardRouteResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__addGuardRouteResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__addGuardRouteResponse);
		for (int i = 0; i < n; i++)
			((_ns1__addGuardRouteResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__addGuardRouteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__addGuardRouteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__addGuardRouteResponse %p -> %p\n", q, p));
	*(_ns1__addGuardRouteResponse*)p = *(_ns1__addGuardRouteResponse*)q;
}

void _ns1__addGuardRoute::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__addGuardRoute::destIp);
	soap_default_std__string(soap, &this->_ns1__addGuardRoute::destNetmask);
	/* transient soap skipped */
}

void _ns1__addGuardRoute::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__addGuardRoute::destIp, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__addGuardRoute::destIp);
	soap_embedded(soap, &this->_ns1__addGuardRoute::destNetmask, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__addGuardRoute::destNetmask);
	/* transient soap skipped */
}

int _ns1__addGuardRoute::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__addGuardRoute(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__addGuardRoute(struct soap *soap, const char *tag, int id, const _ns1__addGuardRoute *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__addGuardRoute), type))
		return soap->error;
	if (soap_out_std__string(soap, "destIp", -1, &(a->_ns1__addGuardRoute::destIp), ""))
		return soap->error;
	if (soap_out_std__string(soap, "destNetmask", -1, &(a->_ns1__addGuardRoute::destNetmask), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__addGuardRoute::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__addGuardRoute(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__addGuardRoute * SOAP_FMAC4 soap_in__ns1__addGuardRoute(struct soap *soap, const char *tag, _ns1__addGuardRoute *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__addGuardRoute *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__addGuardRoute, sizeof(_ns1__addGuardRoute), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__addGuardRoute)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__addGuardRoute *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_destIp1 = 1;
	size_t soap_flag_destNetmask1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_destIp1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "destIp", &(a->_ns1__addGuardRoute::destIp), "xsd:string"))
				{	soap_flag_destIp1--;
					continue;
				}
			if (soap_flag_destNetmask1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "destNetmask", &(a->_ns1__addGuardRoute::destNetmask), "xsd:string"))
				{	soap_flag_destNetmask1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__addGuardRoute *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__addGuardRoute, 0, sizeof(_ns1__addGuardRoute), 0, soap_copy__ns1__addGuardRoute);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_destIp1 > 0 || soap_flag_destNetmask1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__addGuardRoute::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__addGuardRoute);
	if (this->soap_out(soap, tag?tag:"ns1:addGuardRoute", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__addGuardRoute::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__addGuardRoute(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__addGuardRoute * SOAP_FMAC4 soap_get__ns1__addGuardRoute(struct soap *soap, _ns1__addGuardRoute *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__addGuardRoute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__addGuardRoute * SOAP_FMAC2 soap_instantiate__ns1__addGuardRoute(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__addGuardRoute(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__addGuardRoute, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__addGuardRoute);
		if (size)
			*size = sizeof(_ns1__addGuardRoute);
		((_ns1__addGuardRoute*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__addGuardRoute[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__addGuardRoute);
		for (int i = 0; i < n; i++)
			((_ns1__addGuardRoute*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__addGuardRoute*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__addGuardRoute(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__addGuardRoute %p -> %p\n", q, p));
	*(_ns1__addGuardRoute*)p = *(_ns1__addGuardRoute*)q;
}

void _ns1__DelRedirectInfoForUMCResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DelRedirectInfoForUMCResponse::ret = NULL;
	/* transient soap skipped */
}

void _ns1__DelRedirectInfoForUMCResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__DelRedirectInfoForUMCResponse::ret);
	/* transient soap skipped */
}

int _ns1__DelRedirectInfoForUMCResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DelRedirectInfoForUMCResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DelRedirectInfoForUMCResponse(struct soap *soap, const char *tag, int id, const _ns1__DelRedirectInfoForUMCResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ret", -1, &(a->_ns1__DelRedirectInfoForUMCResponse::ret), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DelRedirectInfoForUMCResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DelRedirectInfoForUMCResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DelRedirectInfoForUMCResponse * SOAP_FMAC4 soap_in__ns1__DelRedirectInfoForUMCResponse(struct soap *soap, const char *tag, _ns1__DelRedirectInfoForUMCResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DelRedirectInfoForUMCResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse, sizeof(_ns1__DelRedirectInfoForUMCResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DelRedirectInfoForUMCResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ret1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ret", &(a->_ns1__DelRedirectInfoForUMCResponse::ret), "xsd:int"))
				{	soap_flag_ret1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DelRedirectInfoForUMCResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse, 0, sizeof(_ns1__DelRedirectInfoForUMCResponse), 0, soap_copy__ns1__DelRedirectInfoForUMCResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__DelRedirectInfoForUMCResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse);
	if (this->soap_out(soap, tag?tag:"ns1:DelRedirectInfoForUMCResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DelRedirectInfoForUMCResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DelRedirectInfoForUMCResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DelRedirectInfoForUMCResponse * SOAP_FMAC4 soap_get__ns1__DelRedirectInfoForUMCResponse(struct soap *soap, _ns1__DelRedirectInfoForUMCResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DelRedirectInfoForUMCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DelRedirectInfoForUMCResponse * SOAP_FMAC2 soap_instantiate__ns1__DelRedirectInfoForUMCResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DelRedirectInfoForUMCResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DelRedirectInfoForUMCResponse);
		if (size)
			*size = sizeof(_ns1__DelRedirectInfoForUMCResponse);
		((_ns1__DelRedirectInfoForUMCResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DelRedirectInfoForUMCResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DelRedirectInfoForUMCResponse);
		for (int i = 0; i < n; i++)
			((_ns1__DelRedirectInfoForUMCResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DelRedirectInfoForUMCResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DelRedirectInfoForUMCResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DelRedirectInfoForUMCResponse %p -> %p\n", q, p));
	*(_ns1__DelRedirectInfoForUMCResponse*)p = *(_ns1__DelRedirectInfoForUMCResponse*)q;
}

void _ns1__DelRedirectInfoForUMC::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::import_if_name);
	soap_default_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::import_if_ip);
	soap_default_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::import_if_mask);
	soap_default_int(soap, &this->_ns1__DelRedirectInfoForUMC::import_proto_type);
	soap_default_int(soap, &this->_ns1__DelRedirectInfoForUMC::bgp_as);
	soap_default_int(soap, &this->_ns1__DelRedirectInfoForUMC::bgp_nbr_as);
	soap_default_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::bgp_nbr_ip);
	soap_default_int(soap, &this->_ns1__DelRedirectInfoForUMC::ospf_area);
	soap_default_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::inject_if_name);
	soap_default_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::inject_if_ip);
	soap_default_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::inject_if_mask);
	soap_default_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::inject_nexthop);
	/* transient soap skipped */
}

void _ns1__DelRedirectInfoForUMC::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::import_if_name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::import_if_name);
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::import_if_ip, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::import_if_ip);
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::import_if_mask, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::import_if_mask);
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::import_proto_type, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::bgp_as, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::bgp_nbr_as, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::bgp_nbr_ip, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::bgp_nbr_ip);
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::ospf_area, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::inject_if_name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::inject_if_name);
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::inject_if_ip, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::inject_if_ip);
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::inject_if_mask, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::inject_if_mask);
	soap_embedded(soap, &this->_ns1__DelRedirectInfoForUMC::inject_nexthop, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__DelRedirectInfoForUMC::inject_nexthop);
	/* transient soap skipped */
}

int _ns1__DelRedirectInfoForUMC::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DelRedirectInfoForUMC(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DelRedirectInfoForUMC(struct soap *soap, const char *tag, int id, const _ns1__DelRedirectInfoForUMC *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DelRedirectInfoForUMC), type))
		return soap->error;
	if (soap_out_std__string(soap, "import-if-name", -1, &(a->_ns1__DelRedirectInfoForUMC::import_if_name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "import-if-ip", -1, &(a->_ns1__DelRedirectInfoForUMC::import_if_ip), ""))
		return soap->error;
	if (soap_out_std__string(soap, "import-if-mask", -1, &(a->_ns1__DelRedirectInfoForUMC::import_if_mask), ""))
		return soap->error;
	if (soap_out_int(soap, "import-proto-type", -1, &(a->_ns1__DelRedirectInfoForUMC::import_proto_type), ""))
		return soap->error;
	if (soap_out_int(soap, "bgp-as", -1, &(a->_ns1__DelRedirectInfoForUMC::bgp_as), ""))
		return soap->error;
	if (soap_out_int(soap, "bgp-nbr-as", -1, &(a->_ns1__DelRedirectInfoForUMC::bgp_nbr_as), ""))
		return soap->error;
	if (soap_out_std__string(soap, "bgp-nbr-ip", -1, &(a->_ns1__DelRedirectInfoForUMC::bgp_nbr_ip), ""))
		return soap->error;
	if (soap_out_int(soap, "ospf-area", -1, &(a->_ns1__DelRedirectInfoForUMC::ospf_area), ""))
		return soap->error;
	if (soap_out_std__string(soap, "inject-if-name", -1, &(a->_ns1__DelRedirectInfoForUMC::inject_if_name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "inject-if-ip", -1, &(a->_ns1__DelRedirectInfoForUMC::inject_if_ip), ""))
		return soap->error;
	if (soap_out_std__string(soap, "inject-if-mask", -1, &(a->_ns1__DelRedirectInfoForUMC::inject_if_mask), ""))
		return soap->error;
	if (soap_out_std__string(soap, "inject-nexthop", -1, &(a->_ns1__DelRedirectInfoForUMC::inject_nexthop), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DelRedirectInfoForUMC::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DelRedirectInfoForUMC(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DelRedirectInfoForUMC * SOAP_FMAC4 soap_in__ns1__DelRedirectInfoForUMC(struct soap *soap, const char *tag, _ns1__DelRedirectInfoForUMC *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DelRedirectInfoForUMC *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DelRedirectInfoForUMC, sizeof(_ns1__DelRedirectInfoForUMC), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DelRedirectInfoForUMC)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DelRedirectInfoForUMC *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_import_if_name1 = 1;
	size_t soap_flag_import_if_ip1 = 1;
	size_t soap_flag_import_if_mask1 = 1;
	size_t soap_flag_import_proto_type1 = 1;
	size_t soap_flag_bgp_as1 = 1;
	size_t soap_flag_bgp_nbr_as1 = 1;
	size_t soap_flag_bgp_nbr_ip1 = 1;
	size_t soap_flag_ospf_area1 = 1;
	size_t soap_flag_inject_if_name1 = 1;
	size_t soap_flag_inject_if_ip1 = 1;
	size_t soap_flag_inject_if_mask1 = 1;
	size_t soap_flag_inject_nexthop1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_import_if_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "import-if-name", &(a->_ns1__DelRedirectInfoForUMC::import_if_name), "xsd:string"))
				{	soap_flag_import_if_name1--;
					continue;
				}
			if (soap_flag_import_if_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "import-if-ip", &(a->_ns1__DelRedirectInfoForUMC::import_if_ip), "xsd:string"))
				{	soap_flag_import_if_ip1--;
					continue;
				}
			if (soap_flag_import_if_mask1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "import-if-mask", &(a->_ns1__DelRedirectInfoForUMC::import_if_mask), "xsd:string"))
				{	soap_flag_import_if_mask1--;
					continue;
				}
			if (soap_flag_import_proto_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "import-proto-type", &(a->_ns1__DelRedirectInfoForUMC::import_proto_type), "xsd:int"))
				{	soap_flag_import_proto_type1--;
					continue;
				}
			if (soap_flag_bgp_as1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "bgp-as", &(a->_ns1__DelRedirectInfoForUMC::bgp_as), "xsd:int"))
				{	soap_flag_bgp_as1--;
					continue;
				}
			if (soap_flag_bgp_nbr_as1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "bgp-nbr-as", &(a->_ns1__DelRedirectInfoForUMC::bgp_nbr_as), "xsd:int"))
				{	soap_flag_bgp_nbr_as1--;
					continue;
				}
			if (soap_flag_bgp_nbr_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "bgp-nbr-ip", &(a->_ns1__DelRedirectInfoForUMC::bgp_nbr_ip), "xsd:string"))
				{	soap_flag_bgp_nbr_ip1--;
					continue;
				}
			if (soap_flag_ospf_area1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ospf-area", &(a->_ns1__DelRedirectInfoForUMC::ospf_area), "xsd:int"))
				{	soap_flag_ospf_area1--;
					continue;
				}
			if (soap_flag_inject_if_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "inject-if-name", &(a->_ns1__DelRedirectInfoForUMC::inject_if_name), "xsd:string"))
				{	soap_flag_inject_if_name1--;
					continue;
				}
			if (soap_flag_inject_if_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "inject-if-ip", &(a->_ns1__DelRedirectInfoForUMC::inject_if_ip), "xsd:string"))
				{	soap_flag_inject_if_ip1--;
					continue;
				}
			if (soap_flag_inject_if_mask1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "inject-if-mask", &(a->_ns1__DelRedirectInfoForUMC::inject_if_mask), "xsd:string"))
				{	soap_flag_inject_if_mask1--;
					continue;
				}
			if (soap_flag_inject_nexthop1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "inject-nexthop", &(a->_ns1__DelRedirectInfoForUMC::inject_nexthop), "xsd:string"))
				{	soap_flag_inject_nexthop1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DelRedirectInfoForUMC *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DelRedirectInfoForUMC, 0, sizeof(_ns1__DelRedirectInfoForUMC), 0, soap_copy__ns1__DelRedirectInfoForUMC);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_import_if_name1 > 0 || soap_flag_import_if_ip1 > 0 || soap_flag_import_if_mask1 > 0 || soap_flag_import_proto_type1 > 0 || soap_flag_bgp_as1 > 0 || soap_flag_bgp_nbr_as1 > 0 || soap_flag_bgp_nbr_ip1 > 0 || soap_flag_ospf_area1 > 0 || soap_flag_inject_if_name1 > 0 || soap_flag_inject_if_ip1 > 0 || soap_flag_inject_if_mask1 > 0 || soap_flag_inject_nexthop1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__DelRedirectInfoForUMC::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DelRedirectInfoForUMC);
	if (this->soap_out(soap, tag?tag:"ns1:DelRedirectInfoForUMC", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DelRedirectInfoForUMC::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DelRedirectInfoForUMC(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DelRedirectInfoForUMC * SOAP_FMAC4 soap_get__ns1__DelRedirectInfoForUMC(struct soap *soap, _ns1__DelRedirectInfoForUMC *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DelRedirectInfoForUMC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__DelRedirectInfoForUMC * SOAP_FMAC2 soap_instantiate__ns1__DelRedirectInfoForUMC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DelRedirectInfoForUMC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DelRedirectInfoForUMC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DelRedirectInfoForUMC);
		if (size)
			*size = sizeof(_ns1__DelRedirectInfoForUMC);
		((_ns1__DelRedirectInfoForUMC*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__DelRedirectInfoForUMC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DelRedirectInfoForUMC);
		for (int i = 0; i < n; i++)
			((_ns1__DelRedirectInfoForUMC*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DelRedirectInfoForUMC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DelRedirectInfoForUMC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DelRedirectInfoForUMC %p -> %p\n", q, p));
	*(_ns1__DelRedirectInfoForUMC*)p = *(_ns1__DelRedirectInfoForUMC*)q;
}

void _ns1__setRedirectInfoForUMCResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__setRedirectInfoForUMCResponse::ret = NULL;
	/* transient soap skipped */
}

void _ns1__setRedirectInfoForUMCResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->_ns1__setRedirectInfoForUMCResponse::ret);
	/* transient soap skipped */
}

int _ns1__setRedirectInfoForUMCResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setRedirectInfoForUMCResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setRedirectInfoForUMCResponse(struct soap *soap, const char *tag, int id, const _ns1__setRedirectInfoForUMCResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setRedirectInfoForUMCResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "ret", -1, &(a->_ns1__setRedirectInfoForUMCResponse::ret), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__setRedirectInfoForUMCResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setRedirectInfoForUMCResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setRedirectInfoForUMCResponse * SOAP_FMAC4 soap_in__ns1__setRedirectInfoForUMCResponse(struct soap *soap, const char *tag, _ns1__setRedirectInfoForUMCResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setRedirectInfoForUMCResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setRedirectInfoForUMCResponse, sizeof(_ns1__setRedirectInfoForUMCResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__setRedirectInfoForUMCResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__setRedirectInfoForUMCResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ret1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ret1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ret", &(a->_ns1__setRedirectInfoForUMCResponse::ret), "xsd:int"))
				{	soap_flag_ret1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setRedirectInfoForUMCResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setRedirectInfoForUMCResponse, 0, sizeof(_ns1__setRedirectInfoForUMCResponse), 0, soap_copy__ns1__setRedirectInfoForUMCResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__setRedirectInfoForUMCResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__setRedirectInfoForUMCResponse);
	if (this->soap_out(soap, tag?tag:"ns1:setRedirectInfoForUMCResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setRedirectInfoForUMCResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setRedirectInfoForUMCResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setRedirectInfoForUMCResponse * SOAP_FMAC4 soap_get__ns1__setRedirectInfoForUMCResponse(struct soap *soap, _ns1__setRedirectInfoForUMCResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setRedirectInfoForUMCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__setRedirectInfoForUMCResponse * SOAP_FMAC2 soap_instantiate__ns1__setRedirectInfoForUMCResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setRedirectInfoForUMCResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__setRedirectInfoForUMCResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setRedirectInfoForUMCResponse);
		if (size)
			*size = sizeof(_ns1__setRedirectInfoForUMCResponse);
		((_ns1__setRedirectInfoForUMCResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setRedirectInfoForUMCResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__setRedirectInfoForUMCResponse);
		for (int i = 0; i < n; i++)
			((_ns1__setRedirectInfoForUMCResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__setRedirectInfoForUMCResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__setRedirectInfoForUMCResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__setRedirectInfoForUMCResponse %p -> %p\n", q, p));
	*(_ns1__setRedirectInfoForUMCResponse*)p = *(_ns1__setRedirectInfoForUMCResponse*)q;
}

void _ns1__setRedirectInfoForUMC::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_ns1__setRedirectInfoForUMC::import_if_name);
	soap_default_std__string(soap, &this->_ns1__setRedirectInfoForUMC::import_if_ip);
	soap_default_std__string(soap, &this->_ns1__setRedirectInfoForUMC::import_if_mask);
	soap_default_int(soap, &this->_ns1__setRedirectInfoForUMC::import_proto_type);
	soap_default_int(soap, &this->_ns1__setRedirectInfoForUMC::bgp_as);
	soap_default_int(soap, &this->_ns1__setRedirectInfoForUMC::bgp_nbr_as);
	soap_default_std__string(soap, &this->_ns1__setRedirectInfoForUMC::bgp_nbr_ip);
	soap_default_int(soap, &this->_ns1__setRedirectInfoForUMC::ospf_area);
	soap_default_std__string(soap, &this->_ns1__setRedirectInfoForUMC::inject_if_name);
	soap_default_std__string(soap, &this->_ns1__setRedirectInfoForUMC::inject_if_ip);
	soap_default_std__string(soap, &this->_ns1__setRedirectInfoForUMC::inject_if_mask);
	soap_default_std__string(soap, &this->_ns1__setRedirectInfoForUMC::inject_nexthop);
	/* transient soap skipped */
}

void _ns1__setRedirectInfoForUMC::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::import_if_name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__setRedirectInfoForUMC::import_if_name);
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::import_if_ip, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__setRedirectInfoForUMC::import_if_ip);
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::import_if_mask, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__setRedirectInfoForUMC::import_if_mask);
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::import_proto_type, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::bgp_as, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::bgp_nbr_as, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::bgp_nbr_ip, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__setRedirectInfoForUMC::bgp_nbr_ip);
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::ospf_area, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::inject_if_name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__setRedirectInfoForUMC::inject_if_name);
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::inject_if_ip, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__setRedirectInfoForUMC::inject_if_ip);
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::inject_if_mask, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__setRedirectInfoForUMC::inject_if_mask);
	soap_embedded(soap, &this->_ns1__setRedirectInfoForUMC::inject_nexthop, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__setRedirectInfoForUMC::inject_nexthop);
	/* transient soap skipped */
}

int _ns1__setRedirectInfoForUMC::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__setRedirectInfoForUMC(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__setRedirectInfoForUMC(struct soap *soap, const char *tag, int id, const _ns1__setRedirectInfoForUMC *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__setRedirectInfoForUMC), type))
		return soap->error;
	if (soap_out_std__string(soap, "import-if-name", -1, &(a->_ns1__setRedirectInfoForUMC::import_if_name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "import-if-ip", -1, &(a->_ns1__setRedirectInfoForUMC::import_if_ip), ""))
		return soap->error;
	if (soap_out_std__string(soap, "import-if-mask", -1, &(a->_ns1__setRedirectInfoForUMC::import_if_mask), ""))
		return soap->error;
	if (soap_out_int(soap, "import-proto-type", -1, &(a->_ns1__setRedirectInfoForUMC::import_proto_type), ""))
		return soap->error;
	if (soap_out_int(soap, "bgp-as", -1, &(a->_ns1__setRedirectInfoForUMC::bgp_as), ""))
		return soap->error;
	if (soap_out_int(soap, "bgp-nbr-as", -1, &(a->_ns1__setRedirectInfoForUMC::bgp_nbr_as), ""))
		return soap->error;
	if (soap_out_std__string(soap, "bgp-nbr-ip", -1, &(a->_ns1__setRedirectInfoForUMC::bgp_nbr_ip), ""))
		return soap->error;
	if (soap_out_int(soap, "ospf-area", -1, &(a->_ns1__setRedirectInfoForUMC::ospf_area), ""))
		return soap->error;
	if (soap_out_std__string(soap, "inject-if-name", -1, &(a->_ns1__setRedirectInfoForUMC::inject_if_name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "inject-if-ip", -1, &(a->_ns1__setRedirectInfoForUMC::inject_if_ip), ""))
		return soap->error;
	if (soap_out_std__string(soap, "inject-if-mask", -1, &(a->_ns1__setRedirectInfoForUMC::inject_if_mask), ""))
		return soap->error;
	if (soap_out_std__string(soap, "inject-nexthop", -1, &(a->_ns1__setRedirectInfoForUMC::inject_nexthop), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__setRedirectInfoForUMC::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__setRedirectInfoForUMC(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__setRedirectInfoForUMC * SOAP_FMAC4 soap_in__ns1__setRedirectInfoForUMC(struct soap *soap, const char *tag, _ns1__setRedirectInfoForUMC *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__setRedirectInfoForUMC *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__setRedirectInfoForUMC, sizeof(_ns1__setRedirectInfoForUMC), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__setRedirectInfoForUMC)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__setRedirectInfoForUMC *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_import_if_name1 = 1;
	size_t soap_flag_import_if_ip1 = 1;
	size_t soap_flag_import_if_mask1 = 1;
	size_t soap_flag_import_proto_type1 = 1;
	size_t soap_flag_bgp_as1 = 1;
	size_t soap_flag_bgp_nbr_as1 = 1;
	size_t soap_flag_bgp_nbr_ip1 = 1;
	size_t soap_flag_ospf_area1 = 1;
	size_t soap_flag_inject_if_name1 = 1;
	size_t soap_flag_inject_if_ip1 = 1;
	size_t soap_flag_inject_if_mask1 = 1;
	size_t soap_flag_inject_nexthop1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_import_if_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "import-if-name", &(a->_ns1__setRedirectInfoForUMC::import_if_name), "xsd:string"))
				{	soap_flag_import_if_name1--;
					continue;
				}
			if (soap_flag_import_if_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "import-if-ip", &(a->_ns1__setRedirectInfoForUMC::import_if_ip), "xsd:string"))
				{	soap_flag_import_if_ip1--;
					continue;
				}
			if (soap_flag_import_if_mask1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "import-if-mask", &(a->_ns1__setRedirectInfoForUMC::import_if_mask), "xsd:string"))
				{	soap_flag_import_if_mask1--;
					continue;
				}
			if (soap_flag_import_proto_type1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "import-proto-type", &(a->_ns1__setRedirectInfoForUMC::import_proto_type), "xsd:int"))
				{	soap_flag_import_proto_type1--;
					continue;
				}
			if (soap_flag_bgp_as1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "bgp-as", &(a->_ns1__setRedirectInfoForUMC::bgp_as), "xsd:int"))
				{	soap_flag_bgp_as1--;
					continue;
				}
			if (soap_flag_bgp_nbr_as1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "bgp-nbr-as", &(a->_ns1__setRedirectInfoForUMC::bgp_nbr_as), "xsd:int"))
				{	soap_flag_bgp_nbr_as1--;
					continue;
				}
			if (soap_flag_bgp_nbr_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "bgp-nbr-ip", &(a->_ns1__setRedirectInfoForUMC::bgp_nbr_ip), "xsd:string"))
				{	soap_flag_bgp_nbr_ip1--;
					continue;
				}
			if (soap_flag_ospf_area1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ospf-area", &(a->_ns1__setRedirectInfoForUMC::ospf_area), "xsd:int"))
				{	soap_flag_ospf_area1--;
					continue;
				}
			if (soap_flag_inject_if_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "inject-if-name", &(a->_ns1__setRedirectInfoForUMC::inject_if_name), "xsd:string"))
				{	soap_flag_inject_if_name1--;
					continue;
				}
			if (soap_flag_inject_if_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "inject-if-ip", &(a->_ns1__setRedirectInfoForUMC::inject_if_ip), "xsd:string"))
				{	soap_flag_inject_if_ip1--;
					continue;
				}
			if (soap_flag_inject_if_mask1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "inject-if-mask", &(a->_ns1__setRedirectInfoForUMC::inject_if_mask), "xsd:string"))
				{	soap_flag_inject_if_mask1--;
					continue;
				}
			if (soap_flag_inject_nexthop1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "inject-nexthop", &(a->_ns1__setRedirectInfoForUMC::inject_nexthop), "xsd:string"))
				{	soap_flag_inject_nexthop1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__setRedirectInfoForUMC *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__setRedirectInfoForUMC, 0, sizeof(_ns1__setRedirectInfoForUMC), 0, soap_copy__ns1__setRedirectInfoForUMC);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_import_if_name1 > 0 || soap_flag_import_if_ip1 > 0 || soap_flag_import_if_mask1 > 0 || soap_flag_import_proto_type1 > 0 || soap_flag_bgp_as1 > 0 || soap_flag_bgp_nbr_as1 > 0 || soap_flag_bgp_nbr_ip1 > 0 || soap_flag_ospf_area1 > 0 || soap_flag_inject_if_name1 > 0 || soap_flag_inject_if_ip1 > 0 || soap_flag_inject_if_mask1 > 0 || soap_flag_inject_nexthop1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__setRedirectInfoForUMC::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__setRedirectInfoForUMC);
	if (this->soap_out(soap, tag?tag:"ns1:setRedirectInfoForUMC", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__setRedirectInfoForUMC::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__setRedirectInfoForUMC(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__setRedirectInfoForUMC * SOAP_FMAC4 soap_get__ns1__setRedirectInfoForUMC(struct soap *soap, _ns1__setRedirectInfoForUMC *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__setRedirectInfoForUMC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__setRedirectInfoForUMC * SOAP_FMAC2 soap_instantiate__ns1__setRedirectInfoForUMC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__setRedirectInfoForUMC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__setRedirectInfoForUMC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setRedirectInfoForUMC);
		if (size)
			*size = sizeof(_ns1__setRedirectInfoForUMC);
		((_ns1__setRedirectInfoForUMC*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__setRedirectInfoForUMC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__setRedirectInfoForUMC);
		for (int i = 0; i < n; i++)
			((_ns1__setRedirectInfoForUMC*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__setRedirectInfoForUMC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__setRedirectInfoForUMC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__setRedirectInfoForUMC %p -> %p\n", q, p));
	*(_ns1__setRedirectInfoForUMC*)p = *(_ns1__setRedirectInfoForUMC*)q;
}

void ns1__GuardAggregateConf::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__GuardAggregateConf::aggenable);
	soap_default_int(soap, &this->ns1__GuardAggregateConf::aggmasklen);
	/* transient soap skipped */
}

void ns1__GuardAggregateConf::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns1__GuardAggregateConf::aggenable, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__GuardAggregateConf::aggmasklen, SOAP_TYPE_int);
	/* transient soap skipped */
}

int ns1__GuardAggregateConf::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__GuardAggregateConf(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GuardAggregateConf(struct soap *soap, const char *tag, int id, const ns1__GuardAggregateConf *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GuardAggregateConf), type))
		return soap->error;
	if (soap_out_int(soap, "aggenable", -1, &(a->ns1__GuardAggregateConf::aggenable), ""))
		return soap->error;
	if (soap_out_int(soap, "aggmasklen", -1, &(a->ns1__GuardAggregateConf::aggmasklen), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__GuardAggregateConf::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__GuardAggregateConf(soap, tag, this, type);
}

SOAP_FMAC3 ns1__GuardAggregateConf * SOAP_FMAC4 soap_in_ns1__GuardAggregateConf(struct soap *soap, const char *tag, ns1__GuardAggregateConf *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__GuardAggregateConf *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GuardAggregateConf, sizeof(ns1__GuardAggregateConf), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__GuardAggregateConf)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__GuardAggregateConf *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_aggenable1 = 1;
	size_t soap_flag_aggmasklen1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_aggenable1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "aggenable", &(a->ns1__GuardAggregateConf::aggenable), "xsd:int"))
				{	soap_flag_aggenable1--;
					continue;
				}
			if (soap_flag_aggmasklen1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "aggmasklen", &(a->ns1__GuardAggregateConf::aggmasklen), "xsd:int"))
				{	soap_flag_aggmasklen1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__GuardAggregateConf *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GuardAggregateConf, 0, sizeof(ns1__GuardAggregateConf), 0, soap_copy_ns1__GuardAggregateConf);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_aggenable1 > 0 || soap_flag_aggmasklen1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__GuardAggregateConf::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__GuardAggregateConf);
	if (this->soap_out(soap, tag?tag:"ns1:GuardAggregateConf", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__GuardAggregateConf::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__GuardAggregateConf(soap, this, tag, type);
}

SOAP_FMAC3 ns1__GuardAggregateConf * SOAP_FMAC4 soap_get_ns1__GuardAggregateConf(struct soap *soap, ns1__GuardAggregateConf *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GuardAggregateConf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__GuardAggregateConf * SOAP_FMAC2 soap_instantiate_ns1__GuardAggregateConf(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GuardAggregateConf(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__GuardAggregateConf, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__GuardAggregateConf);
		if (size)
			*size = sizeof(ns1__GuardAggregateConf);
		((ns1__GuardAggregateConf*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__GuardAggregateConf[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__GuardAggregateConf);
		for (int i = 0; i < n; i++)
			((ns1__GuardAggregateConf*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__GuardAggregateConf*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GuardAggregateConf(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__GuardAggregateConf %p -> %p\n", q, p));
	*(ns1__GuardAggregateConf*)p = *(ns1__GuardAggregateConf*)q;
}

void ns1__Result::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__Result::sum);
	soap_default_int(soap, &this->ns1__Result::res_USCOREcount);
	soap_default_std__vectorTemplateOfPointerTons1__GuardRouteInfo(soap, &this->ns1__Result::res);
	/* transient soap skipped */
}

void ns1__Result::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns1__Result::sum, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__Result::res_USCOREcount, SOAP_TYPE_int);
	soap_serialize_std__vectorTemplateOfPointerTons1__GuardRouteInfo(soap, &this->ns1__Result::res);
	/* transient soap skipped */
}

int ns1__Result::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Result(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Result(struct soap *soap, const char *tag, int id, const ns1__Result *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Result), type))
		return soap->error;
	if (soap_out_int(soap, "sum", -1, &(a->ns1__Result::sum), ""))
		return soap->error;
	if (soap_out_int(soap, "res_count", -1, &(a->ns1__Result::res_USCOREcount), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTons1__GuardRouteInfo(soap, "res", -1, &(a->ns1__Result::res), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__Result::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Result(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Result * SOAP_FMAC4 soap_in_ns1__Result(struct soap *soap, const char *tag, ns1__Result *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Result *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Result, sizeof(ns1__Result), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__Result)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__Result *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sum1 = 1;
	size_t soap_flag_res_USCOREcount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sum1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "sum", &(a->ns1__Result::sum), "xsd:int"))
				{	soap_flag_sum1--;
					continue;
				}
			if (soap_flag_res_USCOREcount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "res_count", &(a->ns1__Result::res_USCOREcount), "xsd:int"))
				{	soap_flag_res_USCOREcount1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerTons1__GuardRouteInfo(soap, "res", &(a->ns1__Result::res), "ns1:GuardRouteInfo"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Result *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Result, 0, sizeof(ns1__Result), 0, soap_copy_ns1__Result);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sum1 > 0 || soap_flag_res_USCOREcount1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__Result::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__Result);
	if (this->soap_out(soap, tag?tag:"ns1:Result", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Result::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Result(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Result * SOAP_FMAC4 soap_get_ns1__Result(struct soap *soap, ns1__Result *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__Result * SOAP_FMAC2 soap_instantiate_ns1__Result(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Result(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__Result, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__Result);
		if (size)
			*size = sizeof(ns1__Result);
		((ns1__Result*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__Result[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__Result);
		for (int i = 0; i < n; i++)
			((ns1__Result*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__Result*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Result(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__Result %p -> %p\n", q, p));
	*(ns1__Result*)p = *(ns1__Result*)q;
}

void ns1__GuardRouteInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__GuardRouteInfo::ip = NULL;
	this->ns1__GuardRouteInfo::netmask = NULL;
	/* transient soap skipped */
}

void ns1__GuardRouteInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->ns1__GuardRouteInfo::ip);
	soap_serialize_PointerTostd__string(soap, &this->ns1__GuardRouteInfo::netmask);
	/* transient soap skipped */
}

int ns1__GuardRouteInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__GuardRouteInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GuardRouteInfo(struct soap *soap, const char *tag, int id, const ns1__GuardRouteInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__GuardRouteInfo), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ip", -1, &(a->ns1__GuardRouteInfo::ip), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "netmask", -1, &(a->ns1__GuardRouteInfo::netmask), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__GuardRouteInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__GuardRouteInfo(soap, tag, this, type);
}

SOAP_FMAC3 ns1__GuardRouteInfo * SOAP_FMAC4 soap_in_ns1__GuardRouteInfo(struct soap *soap, const char *tag, ns1__GuardRouteInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__GuardRouteInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__GuardRouteInfo, sizeof(ns1__GuardRouteInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__GuardRouteInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__GuardRouteInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ip1 = 1;
	size_t soap_flag_netmask1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ip", &(a->ns1__GuardRouteInfo::ip), "xsd:string"))
				{	soap_flag_ip1--;
					continue;
				}
			if (soap_flag_netmask1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "netmask", &(a->ns1__GuardRouteInfo::netmask), "xsd:string"))
				{	soap_flag_netmask1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__GuardRouteInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__GuardRouteInfo, 0, sizeof(ns1__GuardRouteInfo), 0, soap_copy_ns1__GuardRouteInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__GuardRouteInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__GuardRouteInfo);
	if (this->soap_out(soap, tag?tag:"ns1:GuardRouteInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__GuardRouteInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__GuardRouteInfo(soap, this, tag, type);
}

SOAP_FMAC3 ns1__GuardRouteInfo * SOAP_FMAC4 soap_get_ns1__GuardRouteInfo(struct soap *soap, ns1__GuardRouteInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__GuardRouteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__GuardRouteInfo * SOAP_FMAC2 soap_instantiate_ns1__GuardRouteInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__GuardRouteInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__GuardRouteInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__GuardRouteInfo);
		if (size)
			*size = sizeof(ns1__GuardRouteInfo);
		((ns1__GuardRouteInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__GuardRouteInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__GuardRouteInfo);
		for (int i = 0; i < n; i++)
			((ns1__GuardRouteInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__GuardRouteInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__GuardRouteInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__GuardRouteInfo %p -> %p\n", q, p));
	*(ns1__GuardRouteInfo*)p = *(ns1__GuardRouteInfo*)q;
}

void ns1__noop::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__noop::a = NULL;
	this->ns1__noop::b = NULL;
	/* transient soap skipped */
}

void ns1__noop::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &this->ns1__noop::a);
	soap_serialize_PointerToint(soap, &this->ns1__noop::b);
	/* transient soap skipped */
}

int ns1__noop::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__noop(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__noop(struct soap *soap, const char *tag, int id, const ns1__noop *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__noop), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "a", -1, &(a->ns1__noop::a), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "b", -1, &(a->ns1__noop::b), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__noop::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__noop(soap, tag, this, type);
}

SOAP_FMAC3 ns1__noop * SOAP_FMAC4 soap_in_ns1__noop(struct soap *soap, const char *tag, ns1__noop *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__noop *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__noop, sizeof(ns1__noop), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__noop)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__noop *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_a1 = 1;
	size_t soap_flag_b1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_a1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "a", &(a->ns1__noop::a), "xsd:int"))
				{	soap_flag_a1--;
					continue;
				}
			if (soap_flag_b1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "b", &(a->ns1__noop::b), "xsd:int"))
				{	soap_flag_b1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__noop *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__noop, 0, sizeof(ns1__noop), 0, soap_copy_ns1__noop);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__noop::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__noop);
	if (this->soap_out(soap, tag?tag:"ns1:noop", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__noop::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__noop(soap, this, tag, type);
}

SOAP_FMAC3 ns1__noop * SOAP_FMAC4 soap_get_ns1__noop(struct soap *soap, ns1__noop *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__noop(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__noop * SOAP_FMAC2 soap_instantiate_ns1__noop(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__noop(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__noop, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__noop);
		if (size)
			*size = sizeof(ns1__noop);
		((ns1__noop*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__noop[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__noop);
		for (int i = 0; i < n; i++)
			((ns1__noop*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__noop*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__noop(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__noop %p -> %p\n", q, p));
	*(ns1__noop*)p = *(ns1__noop*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getGuardAggregateConf(struct soap *soap, struct __ns1__getGuardAggregateConf *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getGuardAggregateConf = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getGuardAggregateConf(struct soap *soap, const struct __ns1__getGuardAggregateConf *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getGuardAggregateConf(soap, &a->ns1__getGuardAggregateConf);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getGuardAggregateConf(struct soap *soap, const char *tag, int id, const struct __ns1__getGuardAggregateConf *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__getGuardAggregateConf(soap, "ns1:getGuardAggregateConf", -1, &a->ns1__getGuardAggregateConf, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getGuardAggregateConf * SOAP_FMAC4 soap_in___ns1__getGuardAggregateConf(struct soap *soap, const char *tag, struct __ns1__getGuardAggregateConf *a, const char *type)
{
	size_t soap_flag_ns1__getGuardAggregateConf = 1;
	short soap_flag;
	a = (struct __ns1__getGuardAggregateConf *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getGuardAggregateConf, sizeof(struct __ns1__getGuardAggregateConf), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getGuardAggregateConf(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getGuardAggregateConf && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getGuardAggregateConf(soap, "ns1:getGuardAggregateConf", &a->ns1__getGuardAggregateConf, ""))
				{	soap_flag_ns1__getGuardAggregateConf--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getGuardAggregateConf(struct soap *soap, const struct __ns1__getGuardAggregateConf *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getGuardAggregateConf(soap, tag?tag:"-ns1:getGuardAggregateConf", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getGuardAggregateConf * SOAP_FMAC4 soap_get___ns1__getGuardAggregateConf(struct soap *soap, struct __ns1__getGuardAggregateConf *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getGuardAggregateConf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getGuardAggregateConf * SOAP_FMAC2 soap_instantiate___ns1__getGuardAggregateConf(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getGuardAggregateConf(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getGuardAggregateConf, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getGuardAggregateConf);
		if (size)
			*size = sizeof(struct __ns1__getGuardAggregateConf);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getGuardAggregateConf[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__getGuardAggregateConf);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__getGuardAggregateConf*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getGuardAggregateConf(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getGuardAggregateConf %p -> %p\n", q, p));
	*(struct __ns1__getGuardAggregateConf*)p = *(struct __ns1__getGuardAggregateConf*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getGuardAggregateConfResponse(struct soap *soap, struct __ns1__getGuardAggregateConfResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__wsdl__GuardAggregateConfResponse(soap, &a->wsdl__GuardAggregateConfResponse);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getGuardAggregateConfResponse(struct soap *soap, const struct __ns1__getGuardAggregateConfResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__wsdl__GuardAggregateConfResponse(soap, &a->wsdl__GuardAggregateConfResponse);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getGuardAggregateConfResponse(struct soap *soap, const char *tag, int id, const struct __ns1__getGuardAggregateConfResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (a->wsdl__GuardAggregateConfResponse)
		soap_element_result(soap, "wsdl:GuardAggregateConfResponse");
	if (soap_out__wsdl__GuardAggregateConfResponse(soap, "wsdl:GuardAggregateConfResponse", -1, &a->wsdl__GuardAggregateConfResponse, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getGuardAggregateConfResponse * SOAP_FMAC4 soap_in___ns1__getGuardAggregateConfResponse(struct soap *soap, const char *tag, struct __ns1__getGuardAggregateConfResponse *a, const char *type)
{
	size_t soap_flag_wsdl__GuardAggregateConfResponse = 1;
	short soap_flag;
	a = (struct __ns1__getGuardAggregateConfResponse *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getGuardAggregateConfResponse, sizeof(struct __ns1__getGuardAggregateConfResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getGuardAggregateConfResponse(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsdl__GuardAggregateConfResponse && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__wsdl__GuardAggregateConfResponse(soap, "wsdl:GuardAggregateConfResponse", &a->wsdl__GuardAggregateConfResponse, ""))
				{	soap_flag_wsdl__GuardAggregateConfResponse--;
					continue;
				}
			soap_check_result(soap, "wsdl:GuardAggregateConfResponse");
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getGuardAggregateConfResponse(struct soap *soap, const struct __ns1__getGuardAggregateConfResponse *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getGuardAggregateConfResponse(soap, tag?tag:"-ns1:getGuardAggregateConfResponse", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getGuardAggregateConfResponse * SOAP_FMAC4 soap_get___ns1__getGuardAggregateConfResponse(struct soap *soap, struct __ns1__getGuardAggregateConfResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getGuardAggregateConfResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getGuardAggregateConfResponse * SOAP_FMAC2 soap_instantiate___ns1__getGuardAggregateConfResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getGuardAggregateConfResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getGuardAggregateConfResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getGuardAggregateConfResponse);
		if (size)
			*size = sizeof(struct __ns1__getGuardAggregateConfResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getGuardAggregateConfResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__getGuardAggregateConfResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__getGuardAggregateConfResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getGuardAggregateConfResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getGuardAggregateConfResponse %p -> %p\n", q, p));
	*(struct __ns1__getGuardAggregateConfResponse*)p = *(struct __ns1__getGuardAggregateConfResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setGuardAggEnable(struct soap *soap, struct __ns1__setGuardAggEnable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__setGuardAggEnable = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setGuardAggEnable(struct soap *soap, const struct __ns1__setGuardAggEnable *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__setGuardAggEnable(soap, &a->ns1__setGuardAggEnable);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setGuardAggEnable(struct soap *soap, const char *tag, int id, const struct __ns1__setGuardAggEnable *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__setGuardAggEnable(soap, "ns1:setGuardAggEnable", -1, &a->ns1__setGuardAggEnable, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setGuardAggEnable * SOAP_FMAC4 soap_in___ns1__setGuardAggEnable(struct soap *soap, const char *tag, struct __ns1__setGuardAggEnable *a, const char *type)
{
	size_t soap_flag_ns1__setGuardAggEnable = 1;
	short soap_flag;
	a = (struct __ns1__setGuardAggEnable *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__setGuardAggEnable, sizeof(struct __ns1__setGuardAggEnable), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__setGuardAggEnable(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__setGuardAggEnable && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__setGuardAggEnable(soap, "ns1:setGuardAggEnable", &a->ns1__setGuardAggEnable, ""))
				{	soap_flag_ns1__setGuardAggEnable--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setGuardAggEnable(struct soap *soap, const struct __ns1__setGuardAggEnable *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__setGuardAggEnable(soap, tag?tag:"-ns1:setGuardAggEnable", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setGuardAggEnable * SOAP_FMAC4 soap_get___ns1__setGuardAggEnable(struct soap *soap, struct __ns1__setGuardAggEnable *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__setGuardAggEnable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__setGuardAggEnable * SOAP_FMAC2 soap_instantiate___ns1__setGuardAggEnable(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__setGuardAggEnable(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__setGuardAggEnable, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__setGuardAggEnable);
		if (size)
			*size = sizeof(struct __ns1__setGuardAggEnable);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__setGuardAggEnable[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__setGuardAggEnable);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__setGuardAggEnable*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setGuardAggEnable(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__setGuardAggEnable %p -> %p\n", q, p));
	*(struct __ns1__setGuardAggEnable*)p = *(struct __ns1__setGuardAggEnable*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getGuardAggregateRouteInfo(struct soap *soap, struct __ns1__getGuardAggregateRouteInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getGuardAggregateRouteInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getGuardAggregateRouteInfo(struct soap *soap, const struct __ns1__getGuardAggregateRouteInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getGuardAggregateRouteInfo(soap, &a->ns1__getGuardAggregateRouteInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getGuardAggregateRouteInfo(struct soap *soap, const char *tag, int id, const struct __ns1__getGuardAggregateRouteInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__getGuardAggregateRouteInfo(soap, "ns1:getGuardAggregateRouteInfo", -1, &a->ns1__getGuardAggregateRouteInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getGuardAggregateRouteInfo * SOAP_FMAC4 soap_in___ns1__getGuardAggregateRouteInfo(struct soap *soap, const char *tag, struct __ns1__getGuardAggregateRouteInfo *a, const char *type)
{
	size_t soap_flag_ns1__getGuardAggregateRouteInfo = 1;
	short soap_flag;
	a = (struct __ns1__getGuardAggregateRouteInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getGuardAggregateRouteInfo, sizeof(struct __ns1__getGuardAggregateRouteInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getGuardAggregateRouteInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getGuardAggregateRouteInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getGuardAggregateRouteInfo(soap, "ns1:getGuardAggregateRouteInfo", &a->ns1__getGuardAggregateRouteInfo, ""))
				{	soap_flag_ns1__getGuardAggregateRouteInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getGuardAggregateRouteInfo(struct soap *soap, const struct __ns1__getGuardAggregateRouteInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getGuardAggregateRouteInfo(soap, tag?tag:"-ns1:getGuardAggregateRouteInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getGuardAggregateRouteInfo * SOAP_FMAC4 soap_get___ns1__getGuardAggregateRouteInfo(struct soap *soap, struct __ns1__getGuardAggregateRouteInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getGuardAggregateRouteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getGuardAggregateRouteInfo * SOAP_FMAC2 soap_instantiate___ns1__getGuardAggregateRouteInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getGuardAggregateRouteInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getGuardAggregateRouteInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getGuardAggregateRouteInfo);
		if (size)
			*size = sizeof(struct __ns1__getGuardAggregateRouteInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getGuardAggregateRouteInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__getGuardAggregateRouteInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__getGuardAggregateRouteInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getGuardAggregateRouteInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getGuardAggregateRouteInfo %p -> %p\n", q, p));
	*(struct __ns1__getGuardAggregateRouteInfo*)p = *(struct __ns1__getGuardAggregateRouteInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setGuardConfigFinish(struct soap *soap, struct __ns1__setGuardConfigFinish *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__setGuardConfigFinish = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setGuardConfigFinish(struct soap *soap, const struct __ns1__setGuardConfigFinish *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__setGuardConfigFinish(soap, &a->ns1__setGuardConfigFinish);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setGuardConfigFinish(struct soap *soap, const char *tag, int id, const struct __ns1__setGuardConfigFinish *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__setGuardConfigFinish(soap, "ns1:setGuardConfigFinish", -1, &a->ns1__setGuardConfigFinish, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setGuardConfigFinish * SOAP_FMAC4 soap_in___ns1__setGuardConfigFinish(struct soap *soap, const char *tag, struct __ns1__setGuardConfigFinish *a, const char *type)
{
	size_t soap_flag_ns1__setGuardConfigFinish = 1;
	short soap_flag;
	a = (struct __ns1__setGuardConfigFinish *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__setGuardConfigFinish, sizeof(struct __ns1__setGuardConfigFinish), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__setGuardConfigFinish(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__setGuardConfigFinish && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__setGuardConfigFinish(soap, "ns1:setGuardConfigFinish", &a->ns1__setGuardConfigFinish, ""))
				{	soap_flag_ns1__setGuardConfigFinish--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setGuardConfigFinish(struct soap *soap, const struct __ns1__setGuardConfigFinish *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__setGuardConfigFinish(soap, tag?tag:"-ns1:setGuardConfigFinish", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setGuardConfigFinish * SOAP_FMAC4 soap_get___ns1__setGuardConfigFinish(struct soap *soap, struct __ns1__setGuardConfigFinish *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__setGuardConfigFinish(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__setGuardConfigFinish * SOAP_FMAC2 soap_instantiate___ns1__setGuardConfigFinish(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__setGuardConfigFinish(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__setGuardConfigFinish, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__setGuardConfigFinish);
		if (size)
			*size = sizeof(struct __ns1__setGuardConfigFinish);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__setGuardConfigFinish[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__setGuardConfigFinish);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__setGuardConfigFinish*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setGuardConfigFinish(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__setGuardConfigFinish %p -> %p\n", q, p));
	*(struct __ns1__setGuardConfigFinish*)p = *(struct __ns1__setGuardConfigFinish*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getGuardRouteInfo(struct soap *soap, struct __ns1__getGuardRouteInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__getGuardRouteInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getGuardRouteInfo(struct soap *soap, const struct __ns1__getGuardRouteInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__getGuardRouteInfo(soap, &a->ns1__getGuardRouteInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getGuardRouteInfo(struct soap *soap, const char *tag, int id, const struct __ns1__getGuardRouteInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__getGuardRouteInfo(soap, "ns1:getGuardRouteInfo", -1, &a->ns1__getGuardRouteInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getGuardRouteInfo * SOAP_FMAC4 soap_in___ns1__getGuardRouteInfo(struct soap *soap, const char *tag, struct __ns1__getGuardRouteInfo *a, const char *type)
{
	size_t soap_flag_ns1__getGuardRouteInfo = 1;
	short soap_flag;
	a = (struct __ns1__getGuardRouteInfo *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__getGuardRouteInfo, sizeof(struct __ns1__getGuardRouteInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__getGuardRouteInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__getGuardRouteInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__getGuardRouteInfo(soap, "ns1:getGuardRouteInfo", &a->ns1__getGuardRouteInfo, ""))
				{	soap_flag_ns1__getGuardRouteInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getGuardRouteInfo(struct soap *soap, const struct __ns1__getGuardRouteInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__getGuardRouteInfo(soap, tag?tag:"-ns1:getGuardRouteInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__getGuardRouteInfo * SOAP_FMAC4 soap_get___ns1__getGuardRouteInfo(struct soap *soap, struct __ns1__getGuardRouteInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__getGuardRouteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__getGuardRouteInfo * SOAP_FMAC2 soap_instantiate___ns1__getGuardRouteInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__getGuardRouteInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__getGuardRouteInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getGuardRouteInfo);
		if (size)
			*size = sizeof(struct __ns1__getGuardRouteInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__getGuardRouteInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__getGuardRouteInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__getGuardRouteInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__getGuardRouteInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__getGuardRouteInfo %p -> %p\n", q, p));
	*(struct __ns1__getGuardRouteInfo*)p = *(struct __ns1__getGuardRouteInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__modGuardRoute(struct soap *soap, struct __ns1__modGuardRoute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__modGuardRoute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__modGuardRoute(struct soap *soap, const struct __ns1__modGuardRoute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__modGuardRoute(soap, &a->ns1__modGuardRoute);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__modGuardRoute(struct soap *soap, const char *tag, int id, const struct __ns1__modGuardRoute *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__modGuardRoute(soap, "ns1:modGuardRoute", -1, &a->ns1__modGuardRoute, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__modGuardRoute * SOAP_FMAC4 soap_in___ns1__modGuardRoute(struct soap *soap, const char *tag, struct __ns1__modGuardRoute *a, const char *type)
{
	size_t soap_flag_ns1__modGuardRoute = 1;
	short soap_flag;
	a = (struct __ns1__modGuardRoute *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__modGuardRoute, sizeof(struct __ns1__modGuardRoute), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__modGuardRoute(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__modGuardRoute && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__modGuardRoute(soap, "ns1:modGuardRoute", &a->ns1__modGuardRoute, ""))
				{	soap_flag_ns1__modGuardRoute--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__modGuardRoute(struct soap *soap, const struct __ns1__modGuardRoute *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__modGuardRoute(soap, tag?tag:"-ns1:modGuardRoute", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__modGuardRoute * SOAP_FMAC4 soap_get___ns1__modGuardRoute(struct soap *soap, struct __ns1__modGuardRoute *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__modGuardRoute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__modGuardRoute * SOAP_FMAC2 soap_instantiate___ns1__modGuardRoute(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__modGuardRoute(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__modGuardRoute, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__modGuardRoute);
		if (size)
			*size = sizeof(struct __ns1__modGuardRoute);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__modGuardRoute[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__modGuardRoute);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__modGuardRoute*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__modGuardRoute(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__modGuardRoute %p -> %p\n", q, p));
	*(struct __ns1__modGuardRoute*)p = *(struct __ns1__modGuardRoute*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeGuardRouteRange(struct soap *soap, struct __ns1__removeGuardRouteRange *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__removeGuardRouteRange = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeGuardRouteRange(struct soap *soap, const struct __ns1__removeGuardRouteRange *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__removeGuardRouteRange(soap, &a->ns1__removeGuardRouteRange);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeGuardRouteRange(struct soap *soap, const char *tag, int id, const struct __ns1__removeGuardRouteRange *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__removeGuardRouteRange(soap, "ns1:removeGuardRouteRange", -1, &a->ns1__removeGuardRouteRange, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__removeGuardRouteRange * SOAP_FMAC4 soap_in___ns1__removeGuardRouteRange(struct soap *soap, const char *tag, struct __ns1__removeGuardRouteRange *a, const char *type)
{
	size_t soap_flag_ns1__removeGuardRouteRange = 1;
	short soap_flag;
	a = (struct __ns1__removeGuardRouteRange *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__removeGuardRouteRange, sizeof(struct __ns1__removeGuardRouteRange), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__removeGuardRouteRange(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__removeGuardRouteRange && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__removeGuardRouteRange(soap, "ns1:removeGuardRouteRange", &a->ns1__removeGuardRouteRange, ""))
				{	soap_flag_ns1__removeGuardRouteRange--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeGuardRouteRange(struct soap *soap, const struct __ns1__removeGuardRouteRange *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__removeGuardRouteRange(soap, tag?tag:"-ns1:removeGuardRouteRange", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__removeGuardRouteRange * SOAP_FMAC4 soap_get___ns1__removeGuardRouteRange(struct soap *soap, struct __ns1__removeGuardRouteRange *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__removeGuardRouteRange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__removeGuardRouteRange * SOAP_FMAC2 soap_instantiate___ns1__removeGuardRouteRange(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__removeGuardRouteRange(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__removeGuardRouteRange, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__removeGuardRouteRange);
		if (size)
			*size = sizeof(struct __ns1__removeGuardRouteRange);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__removeGuardRouteRange[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__removeGuardRouteRange);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__removeGuardRouteRange*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__removeGuardRouteRange(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__removeGuardRouteRange %p -> %p\n", q, p));
	*(struct __ns1__removeGuardRouteRange*)p = *(struct __ns1__removeGuardRouteRange*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__addGuardRouteRange(struct soap *soap, struct __ns1__addGuardRouteRange *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__addGuardRouteRange = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__addGuardRouteRange(struct soap *soap, const struct __ns1__addGuardRouteRange *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__addGuardRouteRange(soap, &a->ns1__addGuardRouteRange);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__addGuardRouteRange(struct soap *soap, const char *tag, int id, const struct __ns1__addGuardRouteRange *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__addGuardRouteRange(soap, "ns1:addGuardRouteRange", -1, &a->ns1__addGuardRouteRange, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__addGuardRouteRange * SOAP_FMAC4 soap_in___ns1__addGuardRouteRange(struct soap *soap, const char *tag, struct __ns1__addGuardRouteRange *a, const char *type)
{
	size_t soap_flag_ns1__addGuardRouteRange = 1;
	short soap_flag;
	a = (struct __ns1__addGuardRouteRange *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__addGuardRouteRange, sizeof(struct __ns1__addGuardRouteRange), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__addGuardRouteRange(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__addGuardRouteRange && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__addGuardRouteRange(soap, "ns1:addGuardRouteRange", &a->ns1__addGuardRouteRange, ""))
				{	soap_flag_ns1__addGuardRouteRange--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__addGuardRouteRange(struct soap *soap, const struct __ns1__addGuardRouteRange *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__addGuardRouteRange(soap, tag?tag:"-ns1:addGuardRouteRange", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__addGuardRouteRange * SOAP_FMAC4 soap_get___ns1__addGuardRouteRange(struct soap *soap, struct __ns1__addGuardRouteRange *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__addGuardRouteRange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__addGuardRouteRange * SOAP_FMAC2 soap_instantiate___ns1__addGuardRouteRange(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__addGuardRouteRange(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__addGuardRouteRange, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__addGuardRouteRange);
		if (size)
			*size = sizeof(struct __ns1__addGuardRouteRange);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__addGuardRouteRange[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__addGuardRouteRange);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__addGuardRouteRange*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__addGuardRouteRange(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__addGuardRouteRange %p -> %p\n", q, p));
	*(struct __ns1__addGuardRouteRange*)p = *(struct __ns1__addGuardRouteRange*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__removeGuardRoute(struct soap *soap, struct __ns1__removeGuardRoute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__removeGuardRoute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__removeGuardRoute(struct soap *soap, const struct __ns1__removeGuardRoute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__removeGuardRoute(soap, &a->ns1__removeGuardRoute);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__removeGuardRoute(struct soap *soap, const char *tag, int id, const struct __ns1__removeGuardRoute *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__removeGuardRoute(soap, "ns1:removeGuardRoute", -1, &a->ns1__removeGuardRoute, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__removeGuardRoute * SOAP_FMAC4 soap_in___ns1__removeGuardRoute(struct soap *soap, const char *tag, struct __ns1__removeGuardRoute *a, const char *type)
{
	size_t soap_flag_ns1__removeGuardRoute = 1;
	short soap_flag;
	a = (struct __ns1__removeGuardRoute *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__removeGuardRoute, sizeof(struct __ns1__removeGuardRoute), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__removeGuardRoute(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__removeGuardRoute && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__removeGuardRoute(soap, "ns1:removeGuardRoute", &a->ns1__removeGuardRoute, ""))
				{	soap_flag_ns1__removeGuardRoute--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__removeGuardRoute(struct soap *soap, const struct __ns1__removeGuardRoute *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__removeGuardRoute(soap, tag?tag:"-ns1:removeGuardRoute", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__removeGuardRoute * SOAP_FMAC4 soap_get___ns1__removeGuardRoute(struct soap *soap, struct __ns1__removeGuardRoute *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__removeGuardRoute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__removeGuardRoute * SOAP_FMAC2 soap_instantiate___ns1__removeGuardRoute(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__removeGuardRoute(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__removeGuardRoute, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__removeGuardRoute);
		if (size)
			*size = sizeof(struct __ns1__removeGuardRoute);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__removeGuardRoute[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__removeGuardRoute);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__removeGuardRoute*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__removeGuardRoute(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__removeGuardRoute %p -> %p\n", q, p));
	*(struct __ns1__removeGuardRoute*)p = *(struct __ns1__removeGuardRoute*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__addGuardRoute(struct soap *soap, struct __ns1__addGuardRoute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__addGuardRoute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__addGuardRoute(struct soap *soap, const struct __ns1__addGuardRoute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__addGuardRoute(soap, &a->ns1__addGuardRoute);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__addGuardRoute(struct soap *soap, const char *tag, int id, const struct __ns1__addGuardRoute *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__addGuardRoute(soap, "ns1:addGuardRoute", -1, &a->ns1__addGuardRoute, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__addGuardRoute * SOAP_FMAC4 soap_in___ns1__addGuardRoute(struct soap *soap, const char *tag, struct __ns1__addGuardRoute *a, const char *type)
{
	size_t soap_flag_ns1__addGuardRoute = 1;
	short soap_flag;
	a = (struct __ns1__addGuardRoute *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__addGuardRoute, sizeof(struct __ns1__addGuardRoute), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__addGuardRoute(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__addGuardRoute && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__addGuardRoute(soap, "ns1:addGuardRoute", &a->ns1__addGuardRoute, ""))
				{	soap_flag_ns1__addGuardRoute--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__addGuardRoute(struct soap *soap, const struct __ns1__addGuardRoute *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__addGuardRoute(soap, tag?tag:"-ns1:addGuardRoute", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__addGuardRoute * SOAP_FMAC4 soap_get___ns1__addGuardRoute(struct soap *soap, struct __ns1__addGuardRoute *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__addGuardRoute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__addGuardRoute * SOAP_FMAC2 soap_instantiate___ns1__addGuardRoute(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__addGuardRoute(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__addGuardRoute, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__addGuardRoute);
		if (size)
			*size = sizeof(struct __ns1__addGuardRoute);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__addGuardRoute[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__addGuardRoute);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__addGuardRoute*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__addGuardRoute(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__addGuardRoute %p -> %p\n", q, p));
	*(struct __ns1__addGuardRoute*)p = *(struct __ns1__addGuardRoute*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DelRedirectInfoForUMC(struct soap *soap, struct __ns1__DelRedirectInfoForUMC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DelRedirectInfoForUMC = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DelRedirectInfoForUMC(struct soap *soap, const struct __ns1__DelRedirectInfoForUMC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DelRedirectInfoForUMC(soap, &a->ns1__DelRedirectInfoForUMC);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DelRedirectInfoForUMC(struct soap *soap, const char *tag, int id, const struct __ns1__DelRedirectInfoForUMC *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__DelRedirectInfoForUMC(soap, "ns1:DelRedirectInfoForUMC", -1, &a->ns1__DelRedirectInfoForUMC, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DelRedirectInfoForUMC * SOAP_FMAC4 soap_in___ns1__DelRedirectInfoForUMC(struct soap *soap, const char *tag, struct __ns1__DelRedirectInfoForUMC *a, const char *type)
{
	size_t soap_flag_ns1__DelRedirectInfoForUMC = 1;
	short soap_flag;
	a = (struct __ns1__DelRedirectInfoForUMC *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DelRedirectInfoForUMC, sizeof(struct __ns1__DelRedirectInfoForUMC), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DelRedirectInfoForUMC(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DelRedirectInfoForUMC && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DelRedirectInfoForUMC(soap, "ns1:DelRedirectInfoForUMC", &a->ns1__DelRedirectInfoForUMC, ""))
				{	soap_flag_ns1__DelRedirectInfoForUMC--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DelRedirectInfoForUMC(struct soap *soap, const struct __ns1__DelRedirectInfoForUMC *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DelRedirectInfoForUMC(soap, tag?tag:"-ns1:DelRedirectInfoForUMC", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DelRedirectInfoForUMC * SOAP_FMAC4 soap_get___ns1__DelRedirectInfoForUMC(struct soap *soap, struct __ns1__DelRedirectInfoForUMC *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DelRedirectInfoForUMC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DelRedirectInfoForUMC * SOAP_FMAC2 soap_instantiate___ns1__DelRedirectInfoForUMC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DelRedirectInfoForUMC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DelRedirectInfoForUMC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DelRedirectInfoForUMC);
		if (size)
			*size = sizeof(struct __ns1__DelRedirectInfoForUMC);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DelRedirectInfoForUMC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__DelRedirectInfoForUMC);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__DelRedirectInfoForUMC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DelRedirectInfoForUMC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DelRedirectInfoForUMC %p -> %p\n", q, p));
	*(struct __ns1__DelRedirectInfoForUMC*)p = *(struct __ns1__DelRedirectInfoForUMC*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__setRedirectInfoForUMC(struct soap *soap, struct __ns1__setRedirectInfoForUMC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__setRedirectInfoForUMC = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__setRedirectInfoForUMC(struct soap *soap, const struct __ns1__setRedirectInfoForUMC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__setRedirectInfoForUMC(soap, &a->ns1__setRedirectInfoForUMC);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__setRedirectInfoForUMC(struct soap *soap, const char *tag, int id, const struct __ns1__setRedirectInfoForUMC *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__setRedirectInfoForUMC(soap, "ns1:setRedirectInfoForUMC", -1, &a->ns1__setRedirectInfoForUMC, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setRedirectInfoForUMC * SOAP_FMAC4 soap_in___ns1__setRedirectInfoForUMC(struct soap *soap, const char *tag, struct __ns1__setRedirectInfoForUMC *a, const char *type)
{
	size_t soap_flag_ns1__setRedirectInfoForUMC = 1;
	short soap_flag;
	a = (struct __ns1__setRedirectInfoForUMC *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__setRedirectInfoForUMC, sizeof(struct __ns1__setRedirectInfoForUMC), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__setRedirectInfoForUMC(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__setRedirectInfoForUMC && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__setRedirectInfoForUMC(soap, "ns1:setRedirectInfoForUMC", &a->ns1__setRedirectInfoForUMC, ""))
				{	soap_flag_ns1__setRedirectInfoForUMC--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__setRedirectInfoForUMC(struct soap *soap, const struct __ns1__setRedirectInfoForUMC *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__setRedirectInfoForUMC(soap, tag?tag:"-ns1:setRedirectInfoForUMC", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__setRedirectInfoForUMC * SOAP_FMAC4 soap_get___ns1__setRedirectInfoForUMC(struct soap *soap, struct __ns1__setRedirectInfoForUMC *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__setRedirectInfoForUMC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__setRedirectInfoForUMC * SOAP_FMAC2 soap_instantiate___ns1__setRedirectInfoForUMC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__setRedirectInfoForUMC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__setRedirectInfoForUMC, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__setRedirectInfoForUMC);
		if (size)
			*size = sizeof(struct __ns1__setRedirectInfoForUMC);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__setRedirectInfoForUMC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__setRedirectInfoForUMC);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__setRedirectInfoForUMC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__setRedirectInfoForUMC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__setRedirectInfoForUMC %p -> %p\n", q, p));
	*(struct __ns1__setRedirectInfoForUMC*)p = *(struct __ns1__setRedirectInfoForUMC*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getGuardAggregateConf(struct soap *soap, _ns1__getGuardAggregateConf *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getGuardAggregateConf))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getGuardAggregateConf(struct soap *soap, const char *tag, int id, _ns1__getGuardAggregateConf *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getGuardAggregateConf);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getGuardAggregateConf ** SOAP_FMAC4 soap_in_PointerTo_ns1__getGuardAggregateConf(struct soap *soap, const char *tag, _ns1__getGuardAggregateConf **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getGuardAggregateConf **)soap_malloc(soap, sizeof(_ns1__getGuardAggregateConf *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getGuardAggregateConf *)soap_instantiate__ns1__getGuardAggregateConf(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getGuardAggregateConf ** p = (_ns1__getGuardAggregateConf **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getGuardAggregateConf, sizeof(_ns1__getGuardAggregateConf), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getGuardAggregateConf(struct soap *soap, _ns1__getGuardAggregateConf *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getGuardAggregateConf);
	if (soap_out_PointerTo_ns1__getGuardAggregateConf(soap, tag?tag:"ns1:getGuardAggregateConf", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getGuardAggregateConf ** SOAP_FMAC4 soap_get_PointerTo_ns1__getGuardAggregateConf(struct soap *soap, _ns1__getGuardAggregateConf **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getGuardAggregateConf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setGuardAggEnableResponse(struct soap *soap, _ns1__setGuardAggEnableResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__setGuardAggEnableResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setGuardAggEnableResponse(struct soap *soap, const char *tag, int id, _ns1__setGuardAggEnableResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__setGuardAggEnableResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__setGuardAggEnableResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__setGuardAggEnableResponse(struct soap *soap, const char *tag, _ns1__setGuardAggEnableResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__setGuardAggEnableResponse **)soap_malloc(soap, sizeof(_ns1__setGuardAggEnableResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__setGuardAggEnableResponse *)soap_instantiate__ns1__setGuardAggEnableResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__setGuardAggEnableResponse ** p = (_ns1__setGuardAggEnableResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__setGuardAggEnableResponse, sizeof(_ns1__setGuardAggEnableResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setGuardAggEnableResponse(struct soap *soap, _ns1__setGuardAggEnableResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__setGuardAggEnableResponse);
	if (soap_out_PointerTo_ns1__setGuardAggEnableResponse(soap, tag?tag:"ns1:setGuardAggEnableResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__setGuardAggEnableResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__setGuardAggEnableResponse(struct soap *soap, _ns1__setGuardAggEnableResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__setGuardAggEnableResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setGuardAggEnable(struct soap *soap, _ns1__setGuardAggEnable *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__setGuardAggEnable))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setGuardAggEnable(struct soap *soap, const char *tag, int id, _ns1__setGuardAggEnable *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__setGuardAggEnable);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__setGuardAggEnable ** SOAP_FMAC4 soap_in_PointerTo_ns1__setGuardAggEnable(struct soap *soap, const char *tag, _ns1__setGuardAggEnable **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__setGuardAggEnable **)soap_malloc(soap, sizeof(_ns1__setGuardAggEnable *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__setGuardAggEnable *)soap_instantiate__ns1__setGuardAggEnable(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__setGuardAggEnable ** p = (_ns1__setGuardAggEnable **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__setGuardAggEnable, sizeof(_ns1__setGuardAggEnable), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setGuardAggEnable(struct soap *soap, _ns1__setGuardAggEnable *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__setGuardAggEnable);
	if (soap_out_PointerTo_ns1__setGuardAggEnable(soap, tag?tag:"ns1:setGuardAggEnable", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__setGuardAggEnable ** SOAP_FMAC4 soap_get_PointerTo_ns1__setGuardAggEnable(struct soap *soap, _ns1__setGuardAggEnable **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__setGuardAggEnable(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getGuardAggregateRouteInfo(struct soap *soap, _ns1__getGuardAggregateRouteInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getGuardAggregateRouteInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getGuardAggregateRouteInfo(struct soap *soap, const char *tag, int id, _ns1__getGuardAggregateRouteInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getGuardAggregateRouteInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getGuardAggregateRouteInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__getGuardAggregateRouteInfo(struct soap *soap, const char *tag, _ns1__getGuardAggregateRouteInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getGuardAggregateRouteInfo **)soap_malloc(soap, sizeof(_ns1__getGuardAggregateRouteInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getGuardAggregateRouteInfo *)soap_instantiate__ns1__getGuardAggregateRouteInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getGuardAggregateRouteInfo ** p = (_ns1__getGuardAggregateRouteInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getGuardAggregateRouteInfo, sizeof(_ns1__getGuardAggregateRouteInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getGuardAggregateRouteInfo(struct soap *soap, _ns1__getGuardAggregateRouteInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getGuardAggregateRouteInfo);
	if (soap_out_PointerTo_ns1__getGuardAggregateRouteInfo(soap, tag?tag:"ns1:getGuardAggregateRouteInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getGuardAggregateRouteInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__getGuardAggregateRouteInfo(struct soap *soap, _ns1__getGuardAggregateRouteInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getGuardAggregateRouteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setGuardConfigFinishResponse(struct soap *soap, _ns1__setGuardConfigFinishResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__setGuardConfigFinishResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setGuardConfigFinishResponse(struct soap *soap, const char *tag, int id, _ns1__setGuardConfigFinishResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__setGuardConfigFinishResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__setGuardConfigFinishResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__setGuardConfigFinishResponse(struct soap *soap, const char *tag, _ns1__setGuardConfigFinishResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__setGuardConfigFinishResponse **)soap_malloc(soap, sizeof(_ns1__setGuardConfigFinishResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__setGuardConfigFinishResponse *)soap_instantiate__ns1__setGuardConfigFinishResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__setGuardConfigFinishResponse ** p = (_ns1__setGuardConfigFinishResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__setGuardConfigFinishResponse, sizeof(_ns1__setGuardConfigFinishResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setGuardConfigFinishResponse(struct soap *soap, _ns1__setGuardConfigFinishResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__setGuardConfigFinishResponse);
	if (soap_out_PointerTo_ns1__setGuardConfigFinishResponse(soap, tag?tag:"ns1:setGuardConfigFinishResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__setGuardConfigFinishResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__setGuardConfigFinishResponse(struct soap *soap, _ns1__setGuardConfigFinishResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__setGuardConfigFinishResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setGuardConfigFinish(struct soap *soap, _ns1__setGuardConfigFinish *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__setGuardConfigFinish))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setGuardConfigFinish(struct soap *soap, const char *tag, int id, _ns1__setGuardConfigFinish *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__setGuardConfigFinish);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__setGuardConfigFinish ** SOAP_FMAC4 soap_in_PointerTo_ns1__setGuardConfigFinish(struct soap *soap, const char *tag, _ns1__setGuardConfigFinish **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__setGuardConfigFinish **)soap_malloc(soap, sizeof(_ns1__setGuardConfigFinish *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__setGuardConfigFinish *)soap_instantiate__ns1__setGuardConfigFinish(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__setGuardConfigFinish ** p = (_ns1__setGuardConfigFinish **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__setGuardConfigFinish, sizeof(_ns1__setGuardConfigFinish), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setGuardConfigFinish(struct soap *soap, _ns1__setGuardConfigFinish *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__setGuardConfigFinish);
	if (soap_out_PointerTo_ns1__setGuardConfigFinish(soap, tag?tag:"ns1:setGuardConfigFinish", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__setGuardConfigFinish ** SOAP_FMAC4 soap_get_PointerTo_ns1__setGuardConfigFinish(struct soap *soap, _ns1__setGuardConfigFinish **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__setGuardConfigFinish(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getGuardRouteInfoResponse(struct soap *soap, _ns1__getGuardRouteInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getGuardRouteInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getGuardRouteInfoResponse(struct soap *soap, const char *tag, int id, _ns1__getGuardRouteInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getGuardRouteInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getGuardRouteInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__getGuardRouteInfoResponse(struct soap *soap, const char *tag, _ns1__getGuardRouteInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getGuardRouteInfoResponse **)soap_malloc(soap, sizeof(_ns1__getGuardRouteInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getGuardRouteInfoResponse *)soap_instantiate__ns1__getGuardRouteInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getGuardRouteInfoResponse ** p = (_ns1__getGuardRouteInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getGuardRouteInfoResponse, sizeof(_ns1__getGuardRouteInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getGuardRouteInfoResponse(struct soap *soap, _ns1__getGuardRouteInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getGuardRouteInfoResponse);
	if (soap_out_PointerTo_ns1__getGuardRouteInfoResponse(soap, tag?tag:"ns1:getGuardRouteInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getGuardRouteInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__getGuardRouteInfoResponse(struct soap *soap, _ns1__getGuardRouteInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getGuardRouteInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getGuardRouteInfo(struct soap *soap, _ns1__getGuardRouteInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__getGuardRouteInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getGuardRouteInfo(struct soap *soap, const char *tag, int id, _ns1__getGuardRouteInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__getGuardRouteInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__getGuardRouteInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__getGuardRouteInfo(struct soap *soap, const char *tag, _ns1__getGuardRouteInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__getGuardRouteInfo **)soap_malloc(soap, sizeof(_ns1__getGuardRouteInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__getGuardRouteInfo *)soap_instantiate__ns1__getGuardRouteInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__getGuardRouteInfo ** p = (_ns1__getGuardRouteInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__getGuardRouteInfo, sizeof(_ns1__getGuardRouteInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getGuardRouteInfo(struct soap *soap, _ns1__getGuardRouteInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__getGuardRouteInfo);
	if (soap_out_PointerTo_ns1__getGuardRouteInfo(soap, tag?tag:"ns1:getGuardRouteInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__getGuardRouteInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__getGuardRouteInfo(struct soap *soap, _ns1__getGuardRouteInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__getGuardRouteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__modGuardRouteResponse(struct soap *soap, _ns1__modGuardRouteResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__modGuardRouteResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__modGuardRouteResponse(struct soap *soap, const char *tag, int id, _ns1__modGuardRouteResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__modGuardRouteResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__modGuardRouteResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__modGuardRouteResponse(struct soap *soap, const char *tag, _ns1__modGuardRouteResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__modGuardRouteResponse **)soap_malloc(soap, sizeof(_ns1__modGuardRouteResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__modGuardRouteResponse *)soap_instantiate__ns1__modGuardRouteResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__modGuardRouteResponse ** p = (_ns1__modGuardRouteResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__modGuardRouteResponse, sizeof(_ns1__modGuardRouteResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__modGuardRouteResponse(struct soap *soap, _ns1__modGuardRouteResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__modGuardRouteResponse);
	if (soap_out_PointerTo_ns1__modGuardRouteResponse(soap, tag?tag:"ns1:modGuardRouteResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__modGuardRouteResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__modGuardRouteResponse(struct soap *soap, _ns1__modGuardRouteResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__modGuardRouteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__modGuardRoute(struct soap *soap, _ns1__modGuardRoute *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__modGuardRoute))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__modGuardRoute(struct soap *soap, const char *tag, int id, _ns1__modGuardRoute *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__modGuardRoute);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__modGuardRoute ** SOAP_FMAC4 soap_in_PointerTo_ns1__modGuardRoute(struct soap *soap, const char *tag, _ns1__modGuardRoute **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__modGuardRoute **)soap_malloc(soap, sizeof(_ns1__modGuardRoute *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__modGuardRoute *)soap_instantiate__ns1__modGuardRoute(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__modGuardRoute ** p = (_ns1__modGuardRoute **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__modGuardRoute, sizeof(_ns1__modGuardRoute), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__modGuardRoute(struct soap *soap, _ns1__modGuardRoute *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__modGuardRoute);
	if (soap_out_PointerTo_ns1__modGuardRoute(soap, tag?tag:"ns1:modGuardRoute", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__modGuardRoute ** SOAP_FMAC4 soap_get_PointerTo_ns1__modGuardRoute(struct soap *soap, _ns1__modGuardRoute **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__modGuardRoute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__removeGuardRouteRangeResponse(struct soap *soap, _ns1__removeGuardRouteRangeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__removeGuardRouteRangeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__removeGuardRouteRangeResponse(struct soap *soap, const char *tag, int id, _ns1__removeGuardRouteRangeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__removeGuardRouteRangeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__removeGuardRouteRangeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__removeGuardRouteRangeResponse(struct soap *soap, const char *tag, _ns1__removeGuardRouteRangeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__removeGuardRouteRangeResponse **)soap_malloc(soap, sizeof(_ns1__removeGuardRouteRangeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__removeGuardRouteRangeResponse *)soap_instantiate__ns1__removeGuardRouteRangeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__removeGuardRouteRangeResponse ** p = (_ns1__removeGuardRouteRangeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__removeGuardRouteRangeResponse, sizeof(_ns1__removeGuardRouteRangeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__removeGuardRouteRangeResponse(struct soap *soap, _ns1__removeGuardRouteRangeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__removeGuardRouteRangeResponse);
	if (soap_out_PointerTo_ns1__removeGuardRouteRangeResponse(soap, tag?tag:"ns1:removeGuardRouteRangeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__removeGuardRouteRangeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__removeGuardRouteRangeResponse(struct soap *soap, _ns1__removeGuardRouteRangeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__removeGuardRouteRangeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__removeGuardRouteRange(struct soap *soap, _ns1__removeGuardRouteRange *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__removeGuardRouteRange))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__removeGuardRouteRange(struct soap *soap, const char *tag, int id, _ns1__removeGuardRouteRange *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__removeGuardRouteRange);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__removeGuardRouteRange ** SOAP_FMAC4 soap_in_PointerTo_ns1__removeGuardRouteRange(struct soap *soap, const char *tag, _ns1__removeGuardRouteRange **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__removeGuardRouteRange **)soap_malloc(soap, sizeof(_ns1__removeGuardRouteRange *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__removeGuardRouteRange *)soap_instantiate__ns1__removeGuardRouteRange(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__removeGuardRouteRange ** p = (_ns1__removeGuardRouteRange **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__removeGuardRouteRange, sizeof(_ns1__removeGuardRouteRange), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__removeGuardRouteRange(struct soap *soap, _ns1__removeGuardRouteRange *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__removeGuardRouteRange);
	if (soap_out_PointerTo_ns1__removeGuardRouteRange(soap, tag?tag:"ns1:removeGuardRouteRange", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__removeGuardRouteRange ** SOAP_FMAC4 soap_get_PointerTo_ns1__removeGuardRouteRange(struct soap *soap, _ns1__removeGuardRouteRange **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__removeGuardRouteRange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__addGuardRouteRangeResponse(struct soap *soap, _ns1__addGuardRouteRangeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__addGuardRouteRangeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__addGuardRouteRangeResponse(struct soap *soap, const char *tag, int id, _ns1__addGuardRouteRangeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__addGuardRouteRangeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__addGuardRouteRangeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__addGuardRouteRangeResponse(struct soap *soap, const char *tag, _ns1__addGuardRouteRangeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__addGuardRouteRangeResponse **)soap_malloc(soap, sizeof(_ns1__addGuardRouteRangeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__addGuardRouteRangeResponse *)soap_instantiate__ns1__addGuardRouteRangeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__addGuardRouteRangeResponse ** p = (_ns1__addGuardRouteRangeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__addGuardRouteRangeResponse, sizeof(_ns1__addGuardRouteRangeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__addGuardRouteRangeResponse(struct soap *soap, _ns1__addGuardRouteRangeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__addGuardRouteRangeResponse);
	if (soap_out_PointerTo_ns1__addGuardRouteRangeResponse(soap, tag?tag:"ns1:addGuardRouteRangeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__addGuardRouteRangeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__addGuardRouteRangeResponse(struct soap *soap, _ns1__addGuardRouteRangeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__addGuardRouteRangeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__addGuardRouteRange(struct soap *soap, _ns1__addGuardRouteRange *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__addGuardRouteRange))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__addGuardRouteRange(struct soap *soap, const char *tag, int id, _ns1__addGuardRouteRange *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__addGuardRouteRange);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__addGuardRouteRange ** SOAP_FMAC4 soap_in_PointerTo_ns1__addGuardRouteRange(struct soap *soap, const char *tag, _ns1__addGuardRouteRange **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__addGuardRouteRange **)soap_malloc(soap, sizeof(_ns1__addGuardRouteRange *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__addGuardRouteRange *)soap_instantiate__ns1__addGuardRouteRange(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__addGuardRouteRange ** p = (_ns1__addGuardRouteRange **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__addGuardRouteRange, sizeof(_ns1__addGuardRouteRange), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__addGuardRouteRange(struct soap *soap, _ns1__addGuardRouteRange *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__addGuardRouteRange);
	if (soap_out_PointerTo_ns1__addGuardRouteRange(soap, tag?tag:"ns1:addGuardRouteRange", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__addGuardRouteRange ** SOAP_FMAC4 soap_get_PointerTo_ns1__addGuardRouteRange(struct soap *soap, _ns1__addGuardRouteRange **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__addGuardRouteRange(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__removeGuardRouteResponse(struct soap *soap, _ns1__removeGuardRouteResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__removeGuardRouteResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__removeGuardRouteResponse(struct soap *soap, const char *tag, int id, _ns1__removeGuardRouteResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__removeGuardRouteResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__removeGuardRouteResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__removeGuardRouteResponse(struct soap *soap, const char *tag, _ns1__removeGuardRouteResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__removeGuardRouteResponse **)soap_malloc(soap, sizeof(_ns1__removeGuardRouteResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__removeGuardRouteResponse *)soap_instantiate__ns1__removeGuardRouteResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__removeGuardRouteResponse ** p = (_ns1__removeGuardRouteResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__removeGuardRouteResponse, sizeof(_ns1__removeGuardRouteResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__removeGuardRouteResponse(struct soap *soap, _ns1__removeGuardRouteResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__removeGuardRouteResponse);
	if (soap_out_PointerTo_ns1__removeGuardRouteResponse(soap, tag?tag:"ns1:removeGuardRouteResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__removeGuardRouteResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__removeGuardRouteResponse(struct soap *soap, _ns1__removeGuardRouteResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__removeGuardRouteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__removeGuardRoute(struct soap *soap, _ns1__removeGuardRoute *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__removeGuardRoute))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__removeGuardRoute(struct soap *soap, const char *tag, int id, _ns1__removeGuardRoute *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__removeGuardRoute);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__removeGuardRoute ** SOAP_FMAC4 soap_in_PointerTo_ns1__removeGuardRoute(struct soap *soap, const char *tag, _ns1__removeGuardRoute **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__removeGuardRoute **)soap_malloc(soap, sizeof(_ns1__removeGuardRoute *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__removeGuardRoute *)soap_instantiate__ns1__removeGuardRoute(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__removeGuardRoute ** p = (_ns1__removeGuardRoute **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__removeGuardRoute, sizeof(_ns1__removeGuardRoute), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__removeGuardRoute(struct soap *soap, _ns1__removeGuardRoute *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__removeGuardRoute);
	if (soap_out_PointerTo_ns1__removeGuardRoute(soap, tag?tag:"ns1:removeGuardRoute", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__removeGuardRoute ** SOAP_FMAC4 soap_get_PointerTo_ns1__removeGuardRoute(struct soap *soap, _ns1__removeGuardRoute **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__removeGuardRoute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__addGuardRouteResponse(struct soap *soap, _ns1__addGuardRouteResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__addGuardRouteResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__addGuardRouteResponse(struct soap *soap, const char *tag, int id, _ns1__addGuardRouteResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__addGuardRouteResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__addGuardRouteResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__addGuardRouteResponse(struct soap *soap, const char *tag, _ns1__addGuardRouteResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__addGuardRouteResponse **)soap_malloc(soap, sizeof(_ns1__addGuardRouteResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__addGuardRouteResponse *)soap_instantiate__ns1__addGuardRouteResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__addGuardRouteResponse ** p = (_ns1__addGuardRouteResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__addGuardRouteResponse, sizeof(_ns1__addGuardRouteResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__addGuardRouteResponse(struct soap *soap, _ns1__addGuardRouteResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__addGuardRouteResponse);
	if (soap_out_PointerTo_ns1__addGuardRouteResponse(soap, tag?tag:"ns1:addGuardRouteResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__addGuardRouteResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__addGuardRouteResponse(struct soap *soap, _ns1__addGuardRouteResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__addGuardRouteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__addGuardRoute(struct soap *soap, _ns1__addGuardRoute *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__addGuardRoute))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__addGuardRoute(struct soap *soap, const char *tag, int id, _ns1__addGuardRoute *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__addGuardRoute);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__addGuardRoute ** SOAP_FMAC4 soap_in_PointerTo_ns1__addGuardRoute(struct soap *soap, const char *tag, _ns1__addGuardRoute **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__addGuardRoute **)soap_malloc(soap, sizeof(_ns1__addGuardRoute *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__addGuardRoute *)soap_instantiate__ns1__addGuardRoute(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__addGuardRoute ** p = (_ns1__addGuardRoute **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__addGuardRoute, sizeof(_ns1__addGuardRoute), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__addGuardRoute(struct soap *soap, _ns1__addGuardRoute *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__addGuardRoute);
	if (soap_out_PointerTo_ns1__addGuardRoute(soap, tag?tag:"ns1:addGuardRoute", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__addGuardRoute ** SOAP_FMAC4 soap_get_PointerTo_ns1__addGuardRoute(struct soap *soap, _ns1__addGuardRoute **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__addGuardRoute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DelRedirectInfoForUMCResponse(struct soap *soap, _ns1__DelRedirectInfoForUMCResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DelRedirectInfoForUMCResponse(struct soap *soap, const char *tag, int id, _ns1__DelRedirectInfoForUMCResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DelRedirectInfoForUMCResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__DelRedirectInfoForUMCResponse(struct soap *soap, const char *tag, _ns1__DelRedirectInfoForUMCResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DelRedirectInfoForUMCResponse **)soap_malloc(soap, sizeof(_ns1__DelRedirectInfoForUMCResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DelRedirectInfoForUMCResponse *)soap_instantiate__ns1__DelRedirectInfoForUMCResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DelRedirectInfoForUMCResponse ** p = (_ns1__DelRedirectInfoForUMCResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DelRedirectInfoForUMCResponse, sizeof(_ns1__DelRedirectInfoForUMCResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DelRedirectInfoForUMCResponse(struct soap *soap, _ns1__DelRedirectInfoForUMCResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DelRedirectInfoForUMCResponse);
	if (soap_out_PointerTo_ns1__DelRedirectInfoForUMCResponse(soap, tag?tag:"ns1:DelRedirectInfoForUMCResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__DelRedirectInfoForUMCResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__DelRedirectInfoForUMCResponse(struct soap *soap, _ns1__DelRedirectInfoForUMCResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DelRedirectInfoForUMCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DelRedirectInfoForUMC(struct soap *soap, _ns1__DelRedirectInfoForUMC *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DelRedirectInfoForUMC))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DelRedirectInfoForUMC(struct soap *soap, const char *tag, int id, _ns1__DelRedirectInfoForUMC *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DelRedirectInfoForUMC);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DelRedirectInfoForUMC ** SOAP_FMAC4 soap_in_PointerTo_ns1__DelRedirectInfoForUMC(struct soap *soap, const char *tag, _ns1__DelRedirectInfoForUMC **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DelRedirectInfoForUMC **)soap_malloc(soap, sizeof(_ns1__DelRedirectInfoForUMC *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DelRedirectInfoForUMC *)soap_instantiate__ns1__DelRedirectInfoForUMC(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DelRedirectInfoForUMC ** p = (_ns1__DelRedirectInfoForUMC **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DelRedirectInfoForUMC, sizeof(_ns1__DelRedirectInfoForUMC), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DelRedirectInfoForUMC(struct soap *soap, _ns1__DelRedirectInfoForUMC *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DelRedirectInfoForUMC);
	if (soap_out_PointerTo_ns1__DelRedirectInfoForUMC(soap, tag?tag:"ns1:DelRedirectInfoForUMC", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__DelRedirectInfoForUMC ** SOAP_FMAC4 soap_get_PointerTo_ns1__DelRedirectInfoForUMC(struct soap *soap, _ns1__DelRedirectInfoForUMC **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DelRedirectInfoForUMC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setRedirectInfoForUMCResponse(struct soap *soap, _ns1__setRedirectInfoForUMCResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__setRedirectInfoForUMCResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setRedirectInfoForUMCResponse(struct soap *soap, const char *tag, int id, _ns1__setRedirectInfoForUMCResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__setRedirectInfoForUMCResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__setRedirectInfoForUMCResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__setRedirectInfoForUMCResponse(struct soap *soap, const char *tag, _ns1__setRedirectInfoForUMCResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__setRedirectInfoForUMCResponse **)soap_malloc(soap, sizeof(_ns1__setRedirectInfoForUMCResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__setRedirectInfoForUMCResponse *)soap_instantiate__ns1__setRedirectInfoForUMCResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__setRedirectInfoForUMCResponse ** p = (_ns1__setRedirectInfoForUMCResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__setRedirectInfoForUMCResponse, sizeof(_ns1__setRedirectInfoForUMCResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setRedirectInfoForUMCResponse(struct soap *soap, _ns1__setRedirectInfoForUMCResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__setRedirectInfoForUMCResponse);
	if (soap_out_PointerTo_ns1__setRedirectInfoForUMCResponse(soap, tag?tag:"ns1:setRedirectInfoForUMCResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__setRedirectInfoForUMCResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__setRedirectInfoForUMCResponse(struct soap *soap, _ns1__setRedirectInfoForUMCResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__setRedirectInfoForUMCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__setRedirectInfoForUMC(struct soap *soap, _ns1__setRedirectInfoForUMC *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__setRedirectInfoForUMC))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__setRedirectInfoForUMC(struct soap *soap, const char *tag, int id, _ns1__setRedirectInfoForUMC *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__setRedirectInfoForUMC);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__setRedirectInfoForUMC ** SOAP_FMAC4 soap_in_PointerTo_ns1__setRedirectInfoForUMC(struct soap *soap, const char *tag, _ns1__setRedirectInfoForUMC **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__setRedirectInfoForUMC **)soap_malloc(soap, sizeof(_ns1__setRedirectInfoForUMC *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__setRedirectInfoForUMC *)soap_instantiate__ns1__setRedirectInfoForUMC(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__setRedirectInfoForUMC ** p = (_ns1__setRedirectInfoForUMC **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__setRedirectInfoForUMC, sizeof(_ns1__setRedirectInfoForUMC), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__setRedirectInfoForUMC(struct soap *soap, _ns1__setRedirectInfoForUMC *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__setRedirectInfoForUMC);
	if (soap_out_PointerTo_ns1__setRedirectInfoForUMC(soap, tag?tag:"ns1:setRedirectInfoForUMC", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__setRedirectInfoForUMC ** SOAP_FMAC4 soap_get_PointerTo_ns1__setRedirectInfoForUMC(struct soap *soap, _ns1__setRedirectInfoForUMC **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__setRedirectInfoForUMC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GuardAggregateConf(struct soap *soap, ns1__GuardAggregateConf *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__GuardAggregateConf))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GuardAggregateConf(struct soap *soap, const char *tag, int id, ns1__GuardAggregateConf *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__GuardAggregateConf);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__GuardAggregateConf ** SOAP_FMAC4 soap_in_PointerTons1__GuardAggregateConf(struct soap *soap, const char *tag, ns1__GuardAggregateConf **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__GuardAggregateConf **)soap_malloc(soap, sizeof(ns1__GuardAggregateConf *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__GuardAggregateConf *)soap_instantiate_ns1__GuardAggregateConf(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__GuardAggregateConf ** p = (ns1__GuardAggregateConf **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__GuardAggregateConf, sizeof(ns1__GuardAggregateConf), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GuardAggregateConf(struct soap *soap, ns1__GuardAggregateConf *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__GuardAggregateConf);
	if (soap_out_PointerTons1__GuardAggregateConf(soap, tag?tag:"ns1:GuardAggregateConf", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__GuardAggregateConf ** SOAP_FMAC4 soap_get_PointerTons1__GuardAggregateConf(struct soap *soap, ns1__GuardAggregateConf **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__GuardAggregateConf(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Result(struct soap *soap, ns1__Result *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__Result))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Result(struct soap *soap, const char *tag, int id, ns1__Result *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__Result);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__Result ** SOAP_FMAC4 soap_in_PointerTons1__Result(struct soap *soap, const char *tag, ns1__Result **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__Result **)soap_malloc(soap, sizeof(ns1__Result *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__Result *)soap_instantiate_ns1__Result(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__Result ** p = (ns1__Result **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__Result, sizeof(ns1__Result), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Result(struct soap *soap, ns1__Result *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__Result);
	if (soap_out_PointerTons1__Result(soap, tag?tag:"ns1:Result", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__Result ** SOAP_FMAC4 soap_get_PointerTons1__Result(struct soap *soap, ns1__Result **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__Result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GuardRouteInfo(struct soap *soap, ns1__GuardRouteInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__GuardRouteInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GuardRouteInfo(struct soap *soap, const char *tag, int id, ns1__GuardRouteInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__GuardRouteInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__GuardRouteInfo ** SOAP_FMAC4 soap_in_PointerTons1__GuardRouteInfo(struct soap *soap, const char *tag, ns1__GuardRouteInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__GuardRouteInfo **)soap_malloc(soap, sizeof(ns1__GuardRouteInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__GuardRouteInfo *)soap_instantiate_ns1__GuardRouteInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__GuardRouteInfo ** p = (ns1__GuardRouteInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__GuardRouteInfo, sizeof(ns1__GuardRouteInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GuardRouteInfo(struct soap *soap, ns1__GuardRouteInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__GuardRouteInfo);
	if (soap_out_PointerTons1__GuardRouteInfo(soap, tag?tag:"ns1:GuardRouteInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__GuardRouteInfo ** SOAP_FMAC4 soap_get_PointerTons1__GuardRouteInfo(struct soap *soap, ns1__GuardRouteInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__GuardRouteInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__GuardRouteInfo(struct soap *soap, std::vector<ns1__GuardRouteInfo * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__GuardRouteInfo(struct soap *soap, const std::vector<ns1__GuardRouteInfo * >*a)
{
	for (std::vector<ns1__GuardRouteInfo * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTons1__GuardRouteInfo(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__GuardRouteInfo(struct soap *soap, const char *tag, int id, const std::vector<ns1__GuardRouteInfo * >*a, const char *type)
{
	for (std::vector<ns1__GuardRouteInfo * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTons1__GuardRouteInfo(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns1__GuardRouteInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__GuardRouteInfo(struct soap *soap, const char *tag, std::vector<ns1__GuardRouteInfo * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerTons1__GuardRouteInfo(soap, -1)))
		return NULL;
	ns1__GuardRouteInfo *n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns1__GuardRouteInfo, SOAP_TYPE_std__vectorTemplateOfPointerTons1__GuardRouteInfo, sizeof(ns1__GuardRouteInfo), 1))
				break;
			if (!soap_in_PointerTons1__GuardRouteInfo(soap, tag, NULL, "ns1:GuardRouteInfo"))
				break;
		}
		else
		{
			if (!soap_in_PointerTons1__GuardRouteInfo(soap, tag, &n, "ns1:GuardRouteInfo"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns1__GuardRouteInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__GuardRouteInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTons1__GuardRouteInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerTons1__GuardRouteInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__GuardRouteInfo * >);
		if (size)
			*size = sizeof(std::vector<ns1__GuardRouteInfo * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns1__GuardRouteInfo * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<ns1__GuardRouteInfo * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<ns1__GuardRouteInfo * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons1__GuardRouteInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns1__GuardRouteInfo * > %p -> %p\n", q, p));
	*(std::vector<ns1__GuardRouteInfo * >*)p = *(std::vector<ns1__GuardRouteInfo * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
